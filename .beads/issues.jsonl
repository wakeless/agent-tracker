{"id":"agent-tracker-1","title":"Initial Agent Tracker build","description":"Build the initial version of the Agent Tracker CLI TUI using Ink (TypeScript)","design":"We are building a tool which tracks the active claude windows. Claude has a hooks API (https://docs.claude.com/en/docs/claude-code/hooks) which can be installed as a plugin (https://docs.claude.com/en/docs/claude-code/plugins-reference)\n\nThe problem this solves is \"lost\" claude windows, ie they get left in a tab, or they get left in a sleep state (ctrl+z) and you don't know where you, or they were.\n\nSo we want to create a 2 column tui window which tracks them and provides information to the user as to their status.\n\nDown the left side is all \"active\" claude sessions (ones that haven't interacted should be at the bottom and \"grey\") active ones should be at the top.\n\nWe need to use Claude Hooks to (specifically session start and session end) to communicate over a named pipe to a central processor (the tool). Alternatively we could send jsonl events to a file and then track it like that.\n\nThe tool then ingests this data and utilises it to display each of your open claude sessions.\n\nOther information that we need to extract from the hooks is \"session\" ie, what is the session, and ideally identifying information from the terminal so that we can tell the user where these claude sessions \"are\" and what they were working on.\n\nWe want to build this tool with typescript and ink. \n\nTo provide a feedback loop for yourself to work on, you can run claude in a directory within this file called `demo-repo` this will allow you to stop and start claude, and see it's sessions start and stop.","status":"closed","priority":0,"issue_type":"epic","created_at":"2025-10-16T13:19:42.636481+11:00","updated_at":"2025-10-16T13:40:24.811445+11:00","closed_at":"2025-10-16T13:40:24.811445+11:00","dependencies":[{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-2","type":"parent-child","created_at":"2025-10-16T13:22:52.838745+11:00","created_by":"michaelgall"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-3","type":"parent-child","created_at":"2025-10-16T13:22:52.884216+11:00","created_by":"michaelgall"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-4","type":"parent-child","created_at":"2025-10-16T13:22:52.931485+11:00","created_by":"michaelgall"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-5","type":"parent-child","created_at":"2025-10-16T13:22:52.976515+11:00","created_by":"michaelgall"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-6","type":"parent-child","created_at":"2025-10-16T13:22:53.017313+11:00","created_by":"michaelgall"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-7","type":"parent-child","created_at":"2025-10-16T13:22:53.064663+11:00","created_by":"michaelgall"}]}
{"id":"agent-tracker-10","title":"investigate and implement more information about where the agent is running","description":"We want the user to be able to quickly identify where and when the agent is running. At the moment it says, \"iTerm.app\" but please research iterm2 and if there's tab information or other ways to connect it that would be great. \n\nIt's also possible that this will be running in docker so think about if it's running in docker how we could extract information from that.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-16T16:45:27.126129+11:00","updated_at":"2025-10-16T16:58:36.714377+11:00","closed_at":"2025-10-16T16:58:36.714377+11:00"}
{"id":"agent-tracker-11","title":"Make agent-tracker easily installable","description":"We want this to be able to be installed with `npm install -g agent-tracker` (or whatever the package name is) and then it will be able to be run with `agent-tracker`","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-16T16:47:00.566587+11:00","updated_at":"2025-10-16T17:01:05.061684+11:00","closed_at":"2025-10-16T17:01:05.061684+11:00"}
{"id":"agent-tracker-12","title":"Utilise more iterm based information in the session list display","description":"","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-16T19:26:39.614906+11:00","updated_at":"2025-10-16T22:39:24.883827+11:00","closed_at":"2025-10-16T22:39:24.883827+11:00"}
{"id":"agent-tracker-13","title":"Implement a separation of concerns in the hooks allowing for different terminals to be implemented. Ie. we are currently on iterm, but plain zsh, or even windows shells may be used in the future and there should be a thin shell around a core for this","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T19:27:54.159942+11:00","updated_at":"2025-10-16T19:37:10.986212+11:00","closed_at":"2025-10-16T19:37:10.986212+11:00"}
{"id":"agent-tracker-14","title":"Add all the hooks in and utilise them to keep the agent as awake","description":"We want to be able to tell if our agent is active, so giving them more events we can monitor that and know how long it has been active. We should also update this \"last active at\" to the interface","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-16T22:03:36.669525+11:00","updated_at":"2025-10-16T22:19:05.17754+11:00","closed_at":"2025-10-16T22:19:05.17754+11:00"}
{"id":"agent-tracker-15","title":"Add the ability to view transcripts from the tracker","description":"When the user selects agent and presses return, we should view the transcript. Pressing escape should go back to the list. We should also have in the session details a few of the last things that happened.","design":"## Updated Plan for agent-tracker-15: Add Transcript Viewing\n\n### Overview\nAdd full transcript viewing capability when pressing Enter on a session, with recent activity preview in the session detail panel.\n\n### Implementation Steps\n\n#### 1. **Create Transcript Types** (`src/types/transcript.ts`)\n- Define `TranscriptEntry` interface matching Claude's JSONL format\n- Types for message content: `text`, `tool_use`, `tool_result`\n- Parsed message interfaces for display\n\n#### 2. **Create TranscriptReader Service** (`src/services/TranscriptReader.ts`)\n- Read JSONL files from `session.transcriptPath`\n- Parse each line as JSON (transcript entries)\n- Extract key fields: type, role, content, timestamp\n- Handle tool uses and tool results\n- Error handling for missing/malformed files\n- Method to get recent N entries for preview\n\n#### 3. **Create TranscriptViewer Component** (`src/components/TranscriptViewer.tsx`)\n- Full-screen transcript view\n- Display conversation flow: user prompts → assistant responses → tool uses\n- Format tool use entries (show tool name and ID)\n- Format text content with proper wrapping\n- Scrollable content using Ink's Box component\n- Show timestamps\n- Footer: \"Press ESC to return to list\"\n\n#### 4. **Update SessionDetail Component** (`src/components/SessionDetail.tsx`)\n- Add \"Recent Activity\" section at bottom\n- Query ActivityStore for last 3-5 events for this session\n- Display: tool names, activity types, timestamps\n- Add hint: \"Press ENTER to view full transcript\"\n\n#### 5. **Update App Component** (`src/App.tsx`)\n- Add state: `viewMode: 'list' | 'transcript'`\n- Update keyboard handling:\n  - Enter: set viewMode='transcript' when session selected\n  - Escape: set viewMode='list' when in transcript view\n- Conditional rendering: show SessionList/Detail OR TranscriptViewer\n- Pass transcript path to TranscriptViewer\n\n#### 6. **Update ActivityStore** (`src/services/ActivityStore.ts`)\n- Add method: `getSessionActivity(sessionId: string, limit?: number)`\n- Returns recent activity events for specific session\n- Sorted by timestamp (newest first)\n\n### File Changes Summary\n- **New**: `src/types/transcript.ts`\n- **New**: `src/services/TranscriptReader.ts`\n- **New**: `src/components/TranscriptViewer.tsx`\n- **Modified**: `src/App.tsx` (add view mode state \u0026 keyboard handling)\n- **Modified**: `src/components/SessionDetail.tsx` (add recent activity section)\n- **Modified**: `src/services/ActivityStore.ts` (add session activity query method)","acceptance_criteria":"- [ ] Pressing Enter on a selected session opens full transcript view\n- [ ] Transcript view displays conversation history with proper formatting\n- [ ] Tool uses are displayed with tool name and timestamp\n- [ ] Pressing Escape returns to session list view\n- [ ] SessionDetail shows last 3-5 recent activities for the session\n- [ ] Recent activity displays tool names and timestamps\n- [ ] Visual hint indicates Enter key opens full transcript\n- [ ] Transcript handles missing or malformed files gracefully\n- [ ] All existing functionality continues to work (navigation, status updates, etc.)","status":"in_progress","priority":0,"issue_type":"feature","created_at":"2025-10-16T22:35:01.582153+11:00","updated_at":"2025-10-16T23:03:54.466427+11:00"}
{"id":"agent-tracker-16","title":"Enrich transcript view to be able to see the full transcript","description":"Let's enhance the full transcript view to be able to view the full text of the transcript. There's also hidden context in that transcript, so being able to actually click in and see the FULL transcript will be good.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-16T23:39:33.645865+11:00","updated_at":"2025-10-17T00:08:42.354509+11:00","closed_at":"2025-10-17T00:08:42.354509+11:00"}
{"id":"agent-tracker-17","title":"Add markdown viewing to transcript view","description":"Check if there is a markdown viewer plugin for TUI, if there is, let's utilise it on transcript view","design":"Research available markdown rendering libraries for Ink/React CLIs. Common options include:\n- ink-markdown: Popular markdown renderer for Ink\n- react-markdown: May work with Ink\n- marked-terminal: Terminal markdown renderer\n\nOnce a suitable library is found, integrate it into the TranscriptViewer component to render markdown content from Claude's responses.","acceptance_criteria":"- Research completed for markdown rendering libraries compatible with Ink\n- Markdown renderer integrated into TranscriptViewer component\n- Claude responses and user messages display with proper markdown formatting\n- Code blocks, lists, headers, and other markdown elements render correctly in the terminal\n- Tests added to verify markdown rendering functionality","notes":"Successfully implemented markdown viewing in transcript viewer.\n\n**Implementation:**\n- Created custom `MarkdownText` component using marked + marked-terminal\n- ink-markdown was incompatible with Ink v6 + React 19 (ESM/CommonJS conflict)\n- Integrated into TranscriptViewer: renders markdown for expanded user/assistant entries\n- 5 passing tests for MarkdownText component\n- Build succeeds without errors\n\n**Color Fix Applied:**\n- Fixed FORCE_COLOR=1 environment variable to enable ANSI color codes\n- chalk (used by marked-terminal) now properly outputs styled text\n- Markdown syntax (##, **, *, `) is converted to proper terminal styling\n- Headers appear in green, bold/italic are styled, code blocks highlighted\n\n**Features:**\n- Headers (h1-h6) styled in green\n- Bold, italic formatting (actual styled text, not raw symbols)\n- Code blocks (inline and fenced) with syntax highlighting\n- Lists (ordered and unordered) with colored bullets\n- Proper terminal styling with ANSI colors\n\n**Files modified:**\n- src/components/MarkdownText.tsx (new - with FORCE_COLOR fix)\n- src/components/MarkdownText.test.tsx (new)\n- src/components/TranscriptViewer.tsx (integrated markdown rendering)\n- package.json (added marked@15, marked-terminal dependencies)\n\n**Status:** ✅ Complete and tested - markdown rendering working with proper color output","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-17T00:05:11.602895+11:00","updated_at":"2025-10-17T01:00:14.768696+11:00"}
{"id":"agent-tracker-18","title":"Improve Tools view in the transcript","description":"When we select a tool, we get an Input JSON and no output. Want to display that substantially better. Currently only showing raw JSON input without proper formatting or tool output results.","design":"Add a dedicated ToolDetailView for displaying tool execution details with full input/output.\n\nNavigation pattern:\n- From TranscriptViewer: Press Enter on a tool_use entry → opens ToolDetailView\n- From ToolDetailView: Press ESC → returns to TranscriptViewer\n\nToolDetailView will display:\n1. Tool name and execution status (success/error)\n2. Formatted input parameters with proper labels (not raw JSON)\n3. Full tool output/results with syntax highlighting\n4. Execution metadata (timing, status indicators)\n5. Scrollable view for large outputs\n\nImplementation approach:\n- Create new ToolDetailView component in src/components/\n- Add navigation state to App.tsx (similar to session list → transcript pattern)\n- Need to read tool_result entries from transcript to get outputs\n- Match tool_use entries with their corresponding tool_result by tool_id\n- Use MarkdownText for syntax highlighting of JSON/code\n- Add keyboard handler in TranscriptViewer for Enter key on tool_use entries","acceptance_criteria":"- Pressing Enter on a tool_use entry opens ToolDetailView\n- ToolDetailView shows tool name and execution status clearly\n- Tool input parameters are formatted and labeled (not raw JSON dump)\n- Tool output/results are displayed in full with syntax highlighting\n- Visual distinction between input and output sections\n- Large outputs are scrollable within the view\n- ESC returns to TranscriptViewer at the same position\n- Tool execution status is visible (success/error indicators)\n- Improved readability compared to current inline display","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-17T00:11:27.128762+11:00","updated_at":"2025-10-17T01:41:03.833334+11:00","closed_at":"2025-10-17T01:41:03.833334+11:00"}
{"id":"agent-tracker-19","title":"Refresh transcript while viewing","description":"When you are viewing a transcript, and other messages come in, the transcript doesn't update. We probably don't want to switch out the transcript, but we should identify that it is there in the footer of the tui and then have a way to scroll into it (probably actually by just scrolling to the bottom with j or down) then it goes to the unshown transcripts","design":"Implement live transcript updates with user-friendly navigation:\n\n1. **Footer notification**: Show indicator when new messages arrive while viewing a transcript (e.g., \"3 new messages\")\n2. **Scroll behavior**: When user scrolls to bottom (j/down key), automatically show new messages\n3. **Auto-scroll toggle**: Optional setting to auto-scroll to new messages vs manual scroll\n4. **State management**: Track read position vs latest message position\n5. **Visual indicators**: Highlight or mark the boundary between read and unread messages\n\nImplementation approach:\n- Subscribe to transcript updates in TranscriptViewer\n- Track scroll position and new message count\n- Update footer with new message indicator\n- Implement smooth scroll-to-bottom on keypress\n- Consider \"jump to latest\" keybinding (e.g., Shift+G like vim)","acceptance_criteria":"- Footer shows count of new messages when they arrive during viewing\n- Scrolling to bottom with j/down reveals new messages\n- Visual indicator separates previously viewed vs new content\n- New messages are appended without disrupting current view position\n- Optional keybinding to jump directly to latest message\n- Tests verify live update behavior and scroll handling","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-17T00:20:45.536248+11:00","updated_at":"2025-10-17T00:28:52.941508+11:00","closed_at":"2025-10-17T00:28:52.941508+11:00"}
{"id":"agent-tracker-2","title":"Project Setup \u0026 Infrastructure","description":"Set up the TypeScript project with Ink and establish the basic project structure","acceptance_criteria":"- [ ] Initialize npm project with package.json\n- [ ] Install and configure TypeScript (tsconfig.json)\n- [ ] Install Ink and React dependencies\n- [ ] Set up build scripts and tooling\n- [ ] Create src/ directory structure\n- [ ] Add .gitignore for node_modules, dist, etc.\n- [ ] Create basic entry point (index.ts or cli.ts)","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-16T13:22:37.284552+11:00","updated_at":"2025-10-16T13:26:39.574318+11:00","closed_at":"2025-10-16T13:26:39.574318+11:00"}
{"id":"agent-tracker-3","title":"Claude Hooks Plugin Development","description":"Implement Claude Hooks plugin to capture session start/end events and metadata","acceptance_criteria":"- [ ] Research Claude Hooks API documentation\n- [ ] Design hook plugin structure and file layout\n- [ ] Implement session-start hook to capture session beginning\n- [ ] Implement session-end hook to capture session completion\n- [ ] Extract session metadata (session ID, working directory)\n- [ ] Extract terminal identification info\n- [ ] Test hooks locally with demo Claude instance","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-16T13:22:37.36233+11:00","updated_at":"2025-10-16T13:32:22.440264+11:00","closed_at":"2025-10-16T13:32:22.440264+11:00"}
{"id":"agent-tracker-4","title":"Data Communication Layer","description":"Build the communication system between hooks and the central TUI processor","acceptance_criteria":"- [ ] Decide on architecture: named pipe vs JSONL file\n- [ ] Define event data schema (SessionStart, SessionEnd, metadata)\n- [ ] Implement data sender in hook plugin\n- [ ] Implement data receiver in central processor\n- [ ] Handle concurrent writes from multiple Claude instances\n- [ ] Add error handling and reconnection logic\n- [ ] Test with multiple simultaneous sessions","notes":"Communication architecture decided: Using JSONL file (~/.agent-tracker/sessions.jsonl) instead of named pipes for better robustness and simplicity. Hook scripts write events to this file, and the TUI will tail/watch it for updates.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-16T13:22:37.45455+11:00","updated_at":"2025-10-16T13:35:23.881322+11:00","closed_at":"2025-10-16T13:35:23.881322+11:00"}
{"id":"agent-tracker-5","title":"Session Tracking \u0026 State Management","description":"Build the core logic for tracking session states and activity","acceptance_criteria":"- [ ] Create session data model/interface\n- [ ] Implement session registry/store\n- [ ] Track session lifecycle (start, active, inactive, ended)\n- [ ] Calculate last activity timestamp\n- [ ] Implement sorting by activity (most recent first)\n- [ ] Mark inactive sessions for visual distinction\n- [ ] Handle session cleanup on end events\n- [ ] Persist session data (optional, for recovery)","notes":"Session persistence is intentionally skipped for MVP - sessions are ephemeral and only exist while the TUI is running. Future enhancement could add persistence if needed.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-16T13:22:37.522219+11:00","updated_at":"2025-10-16T13:37:15.98112+11:00","closed_at":"2025-10-16T13:37:15.98112+11:00"}
{"id":"agent-tracker-6","title":"TUI Interface Development","description":"Build the visual Ink-based TUI with 2-column layout","acceptance_criteria":"- [ ] Create basic Ink app structure with React components\n- [ ] Implement 2-column layout (left: session list, right: details)\n- [ ] Build session list component with sorting\n- [ ] Style active sessions (highlighted/colored)\n- [ ] Style inactive sessions (grey/dimmed)\n- [ ] Implement session selection/navigation\n- [ ] Build detail panel showing session info\n- [ ] Add real-time updates when sessions change\n- [ ] Handle terminal resize gracefully","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-16T13:22:37.590476+11:00","updated_at":"2025-10-16T13:39:33.465867+11:00","closed_at":"2025-10-16T13:39:33.465867+11:00"}
{"id":"agent-tracker-7","title":"Testing Infrastructure \u0026 Demo Setup","description":"Set up demo-repo and testing framework for feedback loop development","acceptance_criteria":"- [ ] Create demo-repo/ directory\n- [ ] Set up test Claude sessions in demo-repo\n- [ ] Create test scenarios (start, stop, multiple sessions)\n- [ ] Document testing workflow\n- [ ] Add scripts for easy testing\n- [ ] Test session detection and tracking\n- [ ] Verify TUI updates correctly","notes":"Testing infrastructure setup complete. Created demo-repo with sample files, test scenarios, workflow documentation, and helper scripts. \n\nThe last two acceptance criteria (test session detection and verify TUI updates) will be completed during integration testing once the hooks, communication layer, and TUI are implemented.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-16T13:22:37.747919+11:00","updated_at":"2025-10-16T13:29:04.458704+11:00","closed_at":"2025-10-16T13:29:04.458704+11:00"}
{"id":"agent-tracker-8","title":"Make the hooks a proper plugin feature","description":"Package the Claude hooks plugin as a proper installable plugin with installation scripts and documentation","design":"Look at the documentation here: https://docs.claude.com/en/docs/claude-code/plugins-reference and examples https://github.com/steveyegge/beads for how it should work. Specifically need it to be able be installed into my ~/.claude/ directory and also in the development directory.\n\nIt's important to note that currently we don't seem to be adding anything to sessions.jsonl","acceptance_criteria":"- [x] Create installation script that copies plugin to ~/.claude/plugins/agent-tracker\n- [x] Create uninstall script to remove plugin\n- [x] Add npm scripts for plugin:install and plugin:uninstall\n- [x] Update README with clear installation instructions\n- [x] Ensure hooks have correct permissions (executable)\n- [x] Fix JSONL formatting (single-line compact JSON)\n- [x] Register plugin in ~/.claude/settings.json enabledPlugins\n- [x] Uninstall script removes plugin from settings.json\n- [ ] Verify hooks fire when Claude session starts (requires new session)\n- [ ] Test sessions appear in TUI","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-16T15:30:58.657675+11:00","updated_at":"2025-10-16T15:48:42.896599+11:00","closed_at":"2025-10-16T15:48:42.896599+11:00"}
{"id":"agent-tracker-9","title":"Move non-marketplace code out of `.claude-plugin/`","description":"`.claude-plugin` is used just for giving information to claude, but the code it executes should live in the regular repository directory. Please move it out.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-16T16:43:21.86794+11:00","updated_at":"2025-10-16T16:53:19.761526+11:00","closed_at":"2025-10-16T16:53:19.761526+11:00"}
