{"id":"agent-tracker-1","title":"Initial Agent Tracker build","description":"Build the initial version of the Agent Tracker CLI TUI using Ink (TypeScript)","design":"We are building a tool which tracks the active claude windows. Claude has a hooks API (https://docs.claude.com/en/docs/claude-code/hooks) which can be installed as a plugin (https://docs.claude.com/en/docs/claude-code/plugins-reference)\n\nThe problem this solves is \"lost\" claude windows, ie they get left in a tab, or they get left in a sleep state (ctrl+z) and you don't know where you, or they were.\n\nSo we want to create a 2 column tui window which tracks them and provides information to the user as to their status.\n\nDown the left side is all \"active\" claude sessions (ones that haven't interacted should be at the bottom and \"grey\") active ones should be at the top.\n\nWe need to use Claude Hooks to (specifically session start and session end) to communicate over a named pipe to a central processor (the tool). Alternatively we could send jsonl events to a file and then track it like that.\n\nThe tool then ingests this data and utilises it to display each of your open claude sessions.\n\nOther information that we need to extract from the hooks is \"session\" ie, what is the session, and ideally identifying information from the terminal so that we can tell the user where these claude sessions \"are\" and what they were working on.\n\nWe want to build this tool with typescript and ink. \n\nTo provide a feedback loop for yourself to work on, you can run claude in a directory within this file called `demo-repo` this will allow you to stop and start claude, and see it's sessions start and stop.","status":"closed","priority":0,"issue_type":"epic","created_at":"2025-10-20T15:12:41.150506+11:00","updated_at":"2025-10-20T15:12:41.150506+11:00","closed_at":"2025-10-20T15:12:41.150506+11:00","dependencies":[{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-2","type":"parent-child","created_at":"2025-10-20T15:12:41.177276+11:00","created_by":"auto-import"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-3","type":"parent-child","created_at":"2025-10-20T15:12:41.178112+11:00","created_by":"auto-import"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-4","type":"parent-child","created_at":"2025-10-20T15:12:41.178937+11:00","created_by":"auto-import"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-5","type":"parent-child","created_at":"2025-10-20T15:12:41.179396+11:00","created_by":"auto-import"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-6","type":"parent-child","created_at":"2025-10-20T15:12:41.179854+11:00","created_by":"auto-import"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-7","type":"parent-child","created_at":"2025-10-20T15:12:41.180307+11:00","created_by":"auto-import"}]}
{"id":"agent-tracker-10","title":"investigate and implement more information about where the agent is running","description":"We want the user to be able to quickly identify where and when the agent is running. At the moment it says, \"iTerm.app\" but please research iterm2 and if there's tab information or other ways to connect it that would be great. \n\nIt's also possible that this will be running in docker so think about if it's running in docker how we could extract information from that.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-20T15:12:41.152893+11:00","updated_at":"2025-10-20T15:12:41.152893+11:00","closed_at":"2025-10-20T15:12:41.152893+11:00"}
{"id":"agent-tracker-11","title":"Make agent-tracker easily installable","description":"We want this to be able to be installed with `npm install -g agent-tracker` (or whatever the package name is) and then it will be able to be run with `agent-tracker`","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-20T15:12:41.154438+11:00","updated_at":"2025-10-20T15:12:41.154438+11:00","closed_at":"2025-10-20T15:12:41.154438+11:00"}
{"id":"agent-tracker-12","title":"Utilise more iterm based information in the session list display","description":"","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-20T15:12:41.155321+11:00","updated_at":"2025-10-20T15:12:41.155321+11:00","closed_at":"2025-10-20T15:12:41.155321+11:00"}
{"id":"agent-tracker-13","title":"Implement a separation of concerns in the hooks allowing for different terminals to be implemented. Ie. we are currently on iterm, but plain zsh, or even windows shells may be used in the future and there should be a thin shell around a core for this","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T15:12:41.155957+11:00","updated_at":"2025-10-20T15:12:41.155957+11:00","closed_at":"2025-10-20T15:12:41.155957+11:00"}
{"id":"agent-tracker-14","title":"Add all the hooks in and utilise them to keep the agent as awake","description":"We want to be able to tell if our agent is active, so giving them more events we can monitor that and know how long it has been active. We should also update this \"last active at\" to the interface","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-20T15:12:41.156569+11:00","updated_at":"2025-10-20T15:12:41.156569+11:00","closed_at":"2025-10-20T15:12:41.156569+11:00"}
{"id":"agent-tracker-15","title":"Add the ability to view transcripts from the tracker","description":"When the user selects agent and presses return, we should view the transcript. Pressing escape should go back to the list. We should also have in the session details a few of the last things that happened.","design":"## Updated Plan for agent-tracker-15: Add Transcript Viewing\n\n### Overview\nAdd full transcript viewing capability when pressing Enter on a session, with recent activity preview in the session detail panel.\n\n### Implementation Steps\n\n#### 1. **Create Transcript Types** (`src/types/transcript.ts`)\n- Define `TranscriptEntry` interface matching Claude's JSONL format\n- Types for message content: `text`, `tool_use`, `tool_result`\n- Parsed message interfaces for display\n\n#### 2. **Create TranscriptReader Service** (`src/services/TranscriptReader.ts`)\n- Read JSONL files from `session.transcriptPath`\n- Parse each line as JSON (transcript entries)\n- Extract key fields: type, role, content, timestamp\n- Handle tool uses and tool results\n- Error handling for missing/malformed files\n- Method to get recent N entries for preview\n\n#### 3. **Create TranscriptViewer Component** (`src/components/TranscriptViewer.tsx`)\n- Full-screen transcript view\n- Display conversation flow: user prompts → assistant responses → tool uses\n- Format tool use entries (show tool name and ID)\n- Format text content with proper wrapping\n- Scrollable content using Ink's Box component\n- Show timestamps\n- Footer: \"Press ESC to return to list\"\n\n#### 4. **Update SessionDetail Component** (`src/components/SessionDetail.tsx`)\n- Add \"Recent Activity\" section at bottom\n- Query ActivityStore for last 3-5 events for this session\n- Display: tool names, activity types, timestamps\n- Add hint: \"Press ENTER to view full transcript\"\n\n#### 5. **Update App Component** (`src/App.tsx`)\n- Add state: `viewMode: 'list' | 'transcript'`\n- Update keyboard handling:\n  - Enter: set viewMode='transcript' when session selected\n  - Escape: set viewMode='list' when in transcript view\n- Conditional rendering: show SessionList/Detail OR TranscriptViewer\n- Pass transcript path to TranscriptViewer\n\n#### 6. **Update ActivityStore** (`src/services/ActivityStore.ts`)\n- Add method: `getSessionActivity(sessionId: string, limit?: number)`\n- Returns recent activity events for specific session\n- Sorted by timestamp (newest first)\n\n### File Changes Summary\n- **New**: `src/types/transcript.ts`\n- **New**: `src/services/TranscriptReader.ts`\n- **New**: `src/components/TranscriptViewer.tsx`\n- **Modified**: `src/App.tsx` (add view mode state \u0026 keyboard handling)\n- **Modified**: `src/components/SessionDetail.tsx` (add recent activity section)\n- **Modified**: `src/services/ActivityStore.ts` (add session activity query method)","acceptance_criteria":"- [ ] Pressing Enter on a selected session opens full transcript view\n- [ ] Transcript view displays conversation history with proper formatting\n- [ ] Tool uses are displayed with tool name and timestamp\n- [ ] Pressing Escape returns to session list view\n- [ ] SessionDetail shows last 3-5 recent activities for the session\n- [ ] Recent activity displays tool names and timestamps\n- [ ] Visual hint indicates Enter key opens full transcript\n- [ ] Transcript handles missing or malformed files gracefully\n- [ ] All existing functionality continues to work (navigation, status updates, etc.)","status":"in_progress","priority":0,"issue_type":"feature","created_at":"2025-10-20T15:12:41.157183+11:00","updated_at":"2025-10-20T15:12:41.157183+11:00"}
{"id":"agent-tracker-16","title":"Enrich transcript view to be able to see the full transcript","description":"Let's enhance the full transcript view to be able to view the full text of the transcript. There's also hidden context in that transcript, so being able to actually click in and see the FULL transcript will be good.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-20T15:12:41.15784+11:00","updated_at":"2025-10-20T15:12:41.15784+11:00","closed_at":"2025-10-20T15:12:41.15784+11:00"}
{"id":"agent-tracker-17","title":"Add markdown viewing to transcript view","description":"Check if there is a markdown viewer plugin for TUI, if there is, let's utilise it on transcript view","design":"Research available markdown rendering libraries for Ink/React CLIs. Common options include:\n- ink-markdown: Popular markdown renderer for Ink\n- react-markdown: May work with Ink\n- marked-terminal: Terminal markdown renderer\n\nOnce a suitable library is found, integrate it into the TranscriptViewer component to render markdown content from Claude's responses.","acceptance_criteria":"- Research completed for markdown rendering libraries compatible with Ink\n- Markdown renderer integrated into TranscriptViewer component\n- Claude responses and user messages display with proper markdown formatting\n- Code blocks, lists, headers, and other markdown elements render correctly in the terminal\n- Tests added to verify markdown rendering functionality","notes":"Successfully implemented markdown viewing in transcript viewer.\n\n**Implementation:**\n- Created custom `MarkdownText` component using marked + marked-terminal\n- ink-markdown was incompatible with Ink v6 + React 19 (ESM/CommonJS conflict)\n- Integrated into TranscriptViewer: renders markdown for expanded user/assistant entries\n- 5 passing tests for MarkdownText component\n- Build succeeds without errors\n\n**Color Fix Applied:**\n- Fixed FORCE_COLOR=1 environment variable to enable ANSI color codes\n- chalk (used by marked-terminal) now properly outputs styled text\n- Markdown syntax (##, **, *, `) is converted to proper terminal styling\n- Headers appear in green, bold/italic are styled, code blocks highlighted\n\n**Features:**\n- Headers (h1-h6) styled in green\n- Bold, italic formatting (actual styled text, not raw symbols)\n- Code blocks (inline and fenced) with syntax highlighting\n- Lists (ordered and unordered) with colored bullets\n- Proper terminal styling with ANSI colors\n\n**Files modified:**\n- src/components/MarkdownText.tsx (new - with FORCE_COLOR fix)\n- src/components/MarkdownText.test.tsx (new)\n- src/components/TranscriptViewer.tsx (integrated markdown rendering)\n- package.json (added marked@15, marked-terminal dependencies)\n\n**Status:** ✅ Complete and tested - markdown rendering working with proper color output","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-20T15:12:41.158684+11:00","updated_at":"2025-10-20T15:12:41.158684+11:00","closed_at":"2025-10-20T15:12:41.158684+11:00"}
{"id":"agent-tracker-18","title":"Improve Tools view in the transcript","description":"When we select a tool, we get an Input JSON and no output. Want to display that substantially better. Currently only showing raw JSON input without proper formatting or tool output results.","design":"Add a dedicated ToolDetailView for displaying tool execution details with full input/output.\n\nNavigation pattern:\n- From TranscriptViewer: Press Enter on a tool_use entry → opens ToolDetailView\n- From ToolDetailView: Press ESC → returns to TranscriptViewer\n\nToolDetailView will display:\n1. Tool name and execution status (success/error)\n2. Formatted input parameters with proper labels (not raw JSON)\n3. Full tool output/results with syntax highlighting\n4. Execution metadata (timing, status indicators)\n5. Scrollable view for large outputs\n\nImplementation approach:\n- Create new ToolDetailView component in src/components/\n- Add navigation state to App.tsx (similar to session list → transcript pattern)\n- Need to read tool_result entries from transcript to get outputs\n- Match tool_use entries with their corresponding tool_result by tool_id\n- Use MarkdownText for syntax highlighting of JSON/code\n- Add keyboard handler in TranscriptViewer for Enter key on tool_use entries","acceptance_criteria":"- Pressing Enter on a tool_use entry opens ToolDetailView\n- ToolDetailView shows tool name and execution status clearly\n- Tool input parameters are formatted and labeled (not raw JSON dump)\n- Tool output/results are displayed in full with syntax highlighting\n- Visual distinction between input and output sections\n- Large outputs are scrollable within the view\n- ESC returns to TranscriptViewer at the same position\n- Tool execution status is visible (success/error indicators)\n- Improved readability compared to current inline display","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T15:12:41.159668+11:00","updated_at":"2025-10-20T15:12:41.159668+11:00","closed_at":"2025-10-20T15:12:41.159668+11:00"}
{"id":"agent-tracker-19","title":"Refresh transcript while viewing","description":"When you are viewing a transcript, and other messages come in, the transcript doesn't update. We probably don't want to switch out the transcript, but we should identify that it is there in the footer of the tui and then have a way to scroll into it (probably actually by just scrolling to the bottom with j or down) then it goes to the unshown transcripts","design":"Implement live transcript updates with user-friendly navigation:\n\n1. **Footer notification**: Show indicator when new messages arrive while viewing a transcript (e.g., \"3 new messages\")\n2. **Scroll behavior**: When user scrolls to bottom (j/down key), automatically show new messages\n3. **Auto-scroll toggle**: Optional setting to auto-scroll to new messages vs manual scroll\n4. **State management**: Track read position vs latest message position\n5. **Visual indicators**: Highlight or mark the boundary between read and unread messages\n\nImplementation approach:\n- Subscribe to transcript updates in TranscriptViewer\n- Track scroll position and new message count\n- Update footer with new message indicator\n- Implement smooth scroll-to-bottom on keypress\n- Consider \"jump to latest\" keybinding (e.g., Shift+G like vim)","acceptance_criteria":"- Footer shows count of new messages when they arrive during viewing\n- Scrolling to bottom with j/down reveals new messages\n- Visual indicator separates previously viewed vs new content\n- New messages are appended without disrupting current view position\n- Optional keybinding to jump directly to latest message\n- Tests verify live update behavior and scroll handling","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-20T15:12:41.160341+11:00","updated_at":"2025-10-20T15:12:41.160341+11:00","closed_at":"2025-10-20T15:12:41.160341+11:00"}
{"id":"agent-tracker-2","title":"Project Setup \u0026 Infrastructure","description":"Set up the TypeScript project with Ink and establish the basic project structure","acceptance_criteria":"- [ ] Initialize npm project with package.json\n- [ ] Install and configure TypeScript (tsconfig.json)\n- [ ] Install Ink and React dependencies\n- [ ] Set up build scripts and tooling\n- [ ] Create src/ directory structure\n- [ ] Add .gitignore for node_modules, dist, etc.\n- [ ] Create basic entry point (index.ts or cli.ts)","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-20T15:12:41.160899+11:00","updated_at":"2025-10-20T15:12:41.160899+11:00","closed_at":"2025-10-20T15:12:41.160899+11:00"}
{"id":"agent-tracker-20","title":"Better knowledge of the git status of an agent","description":"When we are sending events, giving some information to the event stream about git is important. \n\nRequirements:\n- Track the current git branch\n- If it's a worktree, denote this with an asterisk (*) or similar indicator\n- Track if there's uncommitted work (dirty working directory)\n\nPerformance considerations:\n- All git checks should be fast\n- If anything is likely to be slow, we should skip it to avoid imposing on the user","design":"## Git Status Tracking Design\n\n### Fast Git Commands (all \u003c 60ms)\nResearch shows these git commands are fast enough for our needs:\n\n1. **Branch detection**: `git rev-parse --abbrev-ref HEAD` (~10ms)\n2. **Worktree detection**: `git rev-parse --git-common-dir` (~25ms) \n   - Check if output contains `.git/worktrees/`\n3. **Dirty status**: `git diff-index --quiet HEAD` (~55ms)\n   - Exit code 0 = clean, 1 = dirty\n4. **Git repo check**: `git rev-parse --is-inside-work-tree` (~9ms)\n\nTotal worst case: ~100ms - acceptable for session start events.\n\n### Data Structure\n\nAdd new `GitInfo` interface to events:\n\n```typescript\nexport interface GitInfo {\n  is_repo: boolean;\n  branch: string;           // e.g., \"main\"\n  is_worktree: boolean;     // true if in a worktree\n  is_dirty: boolean;        // true if uncommitted changes\n  repo_name?: string;       // e.g., \"agent-tracker\" (from remote or folder)\n}\n```\n\nAdd to `BaseEvent`:\n```typescript\nexport interface BaseEvent {\n  // ... existing fields\n  git: GitInfo;\n}\n```\n\n### Display Strategy\n\n**Session List**:\n- Show branch with worktree indicator: `main*` (if worktree)\n- Show dirty indicator: `main* ●` (red dot for uncommitted work)\n- Format: `[repo-name] branch* ●`\n\n**Session Detail**:\n- Add \"Git Information\" section showing:\n  - Repository: repo-name\n  - Branch: main (worktree indicator if applicable)\n  - Status: Clean / Dirty (X uncommitted changes)\n\n### Performance Safeguards\n- All git commands wrapped in timeout (max 200ms)\n- If any command times out, skip that field (graceful degradation)\n- Use `timeout` command on Unix systems\n- Fall back to \"unknown\" values on error","acceptance_criteria":"- [ ] GitInfo interface added to src/types/events.ts\n- [ ] Git detection script created (scripts/hooks/providers/git-info.sh)\n- [ ] session-start.sh updated to capture git information\n- [ ] session-end.sh updated to capture git information\n- [ ] Session type updated to include git field\n- [ ] SessionStore handles git information from events\n- [ ] SessionList displays branch with worktree indicator (*)\n- [ ] SessionList displays dirty indicator (●) for uncommitted work\n- [ ] SessionDetail shows Git Information section\n- [ ] All git commands complete within 200ms timeout\n- [ ] Graceful fallback to \"unknown\" if git commands fail/timeout\n- [ ] Tested with regular git repo (shows clean branch)\n- [ ] Tested with worktree (shows * indicator)\n- [ ] Tested with dirty working directory (shows ● indicator)\n- [ ] Tested in non-git directory (gracefully shows no git info)","notes":"## Implementation Plan\n\n### Step 1: Create Git Info Provider Script\n**File**: `scripts/hooks/providers/git-info.sh`\n\n```bash\n#!/bin/bash\n# Extract git repository information\n# Returns JSON with git status\n\nset -euo pipefail\n\n# Change to the directory passed as argument (the CWD)\ncd \"$1\" 2\u003e/dev/null || cd .\n\n# Timeout wrapper function (200ms max)\nrun_with_timeout() {\n  timeout 0.2 \"$@\" 2\u003e/dev/null || echo \"unknown\"\n}\n\n# Check if in git repo\nIS_REPO=\"false\"\nif run_with_timeout git rev-parse --is-inside-work-tree \u003e/dev/null 2\u003e\u00261; then\n  IS_REPO=\"true\"\nfi\n\nBRANCH=\"unknown\"\nIS_WORKTREE=\"false\"\nIS_DIRTY=\"false\"\nREPO_NAME=\"unknown\"\n\nif [ \"$IS_REPO\" = \"true\" ]; then\n  # Get branch name\n  BRANCH=$(run_with_timeout git rev-parse --abbrev-ref HEAD)\n  \n  # Check if worktree\n  GIT_COMMON_DIR=$(run_with_timeout git rev-parse --git-common-dir)\n  if echo \"$GIT_COMMON_DIR\" | grep -q \".git/worktrees\"; then\n    IS_WORKTREE=\"true\"\n  fi\n  \n  # Check if dirty (has uncommitted changes)\n  if ! run_with_timeout git diff-index --quiet HEAD 2\u003e/dev/null; then\n    IS_DIRTY=\"true\"\n  fi\n  \n  # Get repo name from remote or folder name\n  REPO_NAME=$(run_with_timeout git remote get-url origin 2\u003e/dev/null | sed 's/.*[\\/:]\\\\([^\\/]*\\\\)\\\\.git$/\\\\1/' || basename \"$(git rev-parse --show-toplevel 2\u003e/dev/null || pwd)\")\nfi\n\n# Output JSON\njq -nc \\\\\n  --arg is_repo \"$IS_REPO\" \\\\\n  --arg branch \"$BRANCH\" \\\\\n  --arg is_worktree \"$IS_WORKTREE\" \\\\\n  --arg is_dirty \"$IS_DIRTY\" \\\\\n  --arg repo_name \"$REPO_NAME\" \\\\\n  '{\n    is_repo: ($is_repo == \"true\"),\n    branch: $branch,\n    is_worktree: ($is_worktree == \"true\"),\n    is_dirty: ($is_dirty == \"true\"),\n    repo_name: $repo_name\n  }'\n```\n\n### Step 2: Update Event Types\n**File**: `src/types/events.ts`\n\nAdd GitInfo interface and update BaseEvent:\n\n```typescript\nexport interface GitInfo {\n  is_repo: boolean;\n  branch: string;\n  is_worktree: boolean;\n  is_dirty: boolean;\n  repo_name: string;\n}\n\nexport interface BaseEvent {\n  // ... existing fields\n  git: GitInfo;\n}\n```\n\n### Step 3: Update Hook Scripts\n**Files**: `scripts/hooks/session-start.sh`, `scripts/hooks/session-end.sh`\n\nAdd git info capture:\n\n```bash\n# Call git info provider\nGIT_INFO_JSON=$(\"${SCRIPT_DIR}/providers/git-info.sh\" \"$CWD\" || echo '{\"is_repo\":false,\"branch\":\"unknown\",\"is_worktree\":false,\"is_dirty\":false,\"repo_name\":\"unknown\"}')\n\n# Extract git fields\nGIT_IS_REPO=$(echo \"$GIT_INFO_JSON\" | jq -r '.is_repo')\nGIT_BRANCH=$(echo \"$GIT_INFO_JSON\" | jq -r '.branch')\nGIT_IS_WORKTREE=$(echo \"$GIT_INFO_JSON\" | jq -r '.is_worktree')\nGIT_IS_DIRTY=$(echo \"$GIT_INFO_JSON\" | jq -r '.is_dirty')\nGIT_REPO_NAME=$(echo \"$GIT_INFO_JSON\" | jq -r '.repo_name')\n\n# Add to EVENT JSON construction:\n--argjson git_is_repo \"$GIT_IS_REPO\" \\\\\n--arg git_branch \"$GIT_BRANCH\" \\\\\n--argjson git_is_worktree \"$GIT_IS_WORKTREE\" \\\\\n--argjson git_is_dirty \"$GIT_IS_DIRTY\" \\\\\n--arg git_repo_name \"$GIT_REPO_NAME\" \\\\\n\n# In the jq object:\ngit: {\n  is_repo: $git_is_repo,\n  branch: $git_branch,\n  is_worktree: $git_is_worktree,\n  is_dirty: $git_is_dirty,\n  repo_name: $git_repo_name\n}\n```\n\n### Step 4: Update Session Type\n**File**: `src/types/session.ts`\n\n```typescript\nimport { TerminalInfo, GitInfo } from './events.js';\n\nexport interface Session {\n  // ... existing fields\n  git: GitInfo;\n}\n```\n\n### Step 5: Update SessionStore\n**File**: `src/services/SessionStore.ts`\n\nUpdate `handleSessionStart` and `handleSessionEnd` to include git field:\n\n```typescript\nconst session: Session = {\n  // ... existing fields\n  git: event.git,\n};\n```\n\n### Step 6: Update SessionList Display\n**File**: `src/components/SessionList.tsx`\n\nAdd git info to session display:\n\n```typescript\nfunction SessionListItem({ session, isSelected }: SessionListItemProps) {\n  // ... existing code\n  \n  const formatGitInfo = () =\u003e {\n    if (!session.git.is_repo) return null;\n    \n    let branch = session.git.branch;\n    if (session.git.is_worktree) branch += '*';\n    if (session.git.is_dirty) branch += ' ●';\n    \n    return `[${session.git.repo_name}] ${branch}`;\n  };\n  \n  // In render:\n  {session.git.is_repo \u0026\u0026 (\n    \u003cText dimColor\u003e {formatGitInfo()}\u003c/Text\u003e\n  )}\n}\n```\n\n### Step 7: Update SessionDetail Display\n**File**: `src/components/SessionDetail.tsx`\n\nAdd Git Information section:\n\n```typescript\n{session.git.is_repo \u0026\u0026 (\n  \u003c\u003e\n    \u003cBox marginTop={1} marginBottom={1}\u003e\n      \u003cText bold underline\u003eGit Information\u003c/Text\u003e\n    \u003c/Box\u003e\n    \u003cDetailRow label=\"Repository\" value={session.git.repo_name} /\u003e\n    \u003cDetailRow \n      label=\"Branch\" \n      value={`${session.git.branch}${session.git.is_worktree ? ' (worktree)' : ''}`} \n    /\u003e\n    \u003cDetailRow \n      label=\"Status\" \n      value={session.git.is_dirty ? 'Dirty (uncommitted changes)' : 'Clean'} \n    /\u003e\n  \u003c/\u003e\n)}\n```\n\n### Step 8: Testing Plan\n\n1. **Regular repo**: Start Claude in agent-tracker directory\n   - Should show: `[agent-tracker] main` (clean)\n   \n2. **With changes**: Make uncommitted changes\n   - Should show: `[agent-tracker] main ●`\n   \n3. **Worktree**: Create and test in a worktree\n   - Should show: `[agent-tracker] feature-branch*`\n   \n4. **Non-git**: Start Claude in home directory\n   - Should show no git info section\n\n### Files to Modify/Create\n- **New**: scripts/hooks/providers/git-info.sh\n- **Modify**: scripts/hooks/session-start.sh\n- **Modify**: scripts/hooks/session-end.sh\n- **Modify**: src/types/events.ts\n- **Modify**: src/types/session.ts\n- **Modify**: src/services/SessionStore.ts\n- **Modify**: src/components/SessionList.tsx\n- **Modify**: src/components/SessionDetail.tsx","status":"closed","priority":0,"issue_type":"feature","assignee":"claude","created_at":"2025-10-20T15:12:41.16147+11:00","updated_at":"2025-10-20T15:12:41.16147+11:00","closed_at":"2025-10-20T15:12:41.16147+11:00"}
{"id":"agent-tracker-21","title":"Awaiting user input should be highly visible","description":"If the agent is awaiting input from a user then it should be clearly denoted in the session list (and probably we need a new section on the main layout for alerts).\n\nRequirements:\n- Clearly show when a session is waiting for user input\n- Make this visible in the session list\n- Consider adding a new \"Alerts\" section to the main layout for urgent notifications\n- Extract this information from the inbound hooks\n\nThis improves user awareness of sessions that need their attention.","status":"closed","priority":0,"issue_type":"epic","created_at":"2025-10-20T15:12:41.162093+11:00","updated_at":"2025-10-20T15:12:41.162093+11:00","closed_at":"2025-10-20T15:12:41.162093+11:00","dependencies":[{"issue_id":"agent-tracker-21","depends_on_id":"agent-tracker-22","type":"parent-child","created_at":"2025-10-20T15:12:41.180767+11:00","created_by":"auto-import"},{"issue_id":"agent-tracker-21","depends_on_id":"agent-tracker-23","type":"parent-child","created_at":"2025-10-20T15:12:41.181207+11:00","created_by":"auto-import"},{"issue_id":"agent-tracker-21","depends_on_id":"agent-tracker-24","type":"parent-child","created_at":"2025-10-20T15:12:41.181653+11:00","created_by":"auto-import"},{"issue_id":"agent-tracker-21","depends_on_id":"agent-tracker-25","type":"parent-child","created_at":"2025-10-20T15:12:41.182095+11:00","created_by":"auto-import"}]}
{"id":"agent-tracker-22","title":"Add hook event to detect when agent is awaiting user input","description":"Identify and implement the hook event that fires when the agent is waiting for user input.\n\n- Research which inbound hook events indicate waiting state\n- Update event types in src/types/events.ts if needed\n- Update hook scripts to capture this state\n- Write event to sessions.jsonl with waiting indicator","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-20T15:12:41.16287+11:00","updated_at":"2025-10-20T15:12:41.16287+11:00","closed_at":"2025-10-20T15:12:41.16287+11:00"}
{"id":"agent-tracker-23","title":"Track awaiting-input state in SessionStore","description":"Update SessionStore to track when a session is waiting for user input.\n\n- Add awaitingInput boolean to Session type\n- Update SessionStore to handle waiting state events\n- Ensure state is cleared when user responds","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-20T15:12:41.163831+11:00","updated_at":"2025-10-20T15:12:41.163831+11:00","closed_at":"2025-10-20T15:12:41.163831+11:00","dependencies":[{"issue_id":"agent-tracker-23","depends_on_id":"agent-tracker-22","type":"blocks","created_at":"2025-10-20T15:12:41.182546+11:00","created_by":"auto-import"}]}
{"id":"agent-tracker-24","title":"Add visual indicator in SessionList for awaiting-input sessions","description":"Update SessionList component to visually indicate when a session is waiting for user input.\n\n- Add icon/badge for awaiting-input state (e.g., ⏳ or ⚠️)\n- Use distinct color (e.g., yellow/orange)\n- Sort awaiting-input sessions to top of list\n- Ensure it's immediately visible to user","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-20T15:12:41.164384+11:00","updated_at":"2025-10-20T15:12:41.164384+11:00","closed_at":"2025-10-20T15:12:41.164384+11:00","dependencies":[{"issue_id":"agent-tracker-24","depends_on_id":"agent-tracker-23","type":"blocks","created_at":"2025-10-20T15:12:41.183066+11:00","created_by":"auto-import"}]}
{"id":"agent-tracker-25","title":"Design and implement Alerts section in main layout","description":"Add a dedicated Alerts section to the main App layout for urgent notifications.\n\n- Design alert area placement (top of screen? dedicated panel?)\n- Show count of sessions awaiting input\n- Make alerts dismissable or auto-clear when resolved\n- Consider other alert types for future use\n\nThis is lower priority than session list indicator but provides additional visibility.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-20T15:12:41.165041+11:00","updated_at":"2025-10-20T15:12:41.165041+11:00","dependencies":[{"issue_id":"agent-tracker-25","depends_on_id":"agent-tracker-23","type":"blocks","created_at":"2025-10-20T15:12:41.183556+11:00","created_by":"auto-import"}]}
{"id":"agent-tracker-26","title":"Better identification of the repository or folder","description":"It's currently difficult to distinguish between which project/repository each agent is working in.\n\nProblem:\n- Folders like `main` are not descriptive (worktree named `pipie/main`)\n- Need better identification to distinguish between sessions\n- Current cwd path alone is not sufficient\n\nRequirements:\n- Detect and show the actual repository name (e.g., \"pipie\")\n- For worktrees, show both repo and worktree branch (e.g., \"pipie/main\")\n- Display this prominently in session list and details\n- Make it easy to identify which project a session belongs to at a glance","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-20T15:12:41.16557+11:00","updated_at":"2025-10-20T15:12:41.16557+11:00","closed_at":"2025-10-20T15:12:41.16557+11:00"}
{"id":"agent-tracker-27","title":"Improve the terminal information feature","description":"We are currently putting Terminal Information at the top of the SessionDetails but really, its purpose is just to identify where the agent is.\n\nSo let's pull the majority of that out and probably create a \"breadcrumb\". This breadcrumb should understand that in a terminal there's a hierarchy: Window \u003e Tab \u003e Pane. We have some information about the Pane/Tab (that's the tab title) and the iTerm session id encodes this information in the window (kind of) - w0t4p2:{uuid} is window 0 tab 4 pane 2.\n\nLet's utilize that and use it to create a breadcrumb for the session details.","design":"## Implementation Plan\n\n### Overview\nReplace the verbose \"Terminal Information\" section in SessionDetail with a compact breadcrumb that parses and displays the terminal hierarchy (Window \u003e Tab \u003e Pane) encoded in the iTerm session ID.\n\n### Current State Analysis\n\n**SessionDetail.tsx (lines 37-63):**\n- Currently displays a full \"Terminal Information\" section with:\n  - Program, iTerm Tab, iTerm Window, iTerm Profile, iTerm Session ID, TTY, Shell, TERM\n- This is verbose and takes up significant space\n- Purpose is really just to identify where the agent is running\n\n**iTerm Session ID Format:**\n- Format: `w{window}t{tab}p{pane}:{uuid}`\n- Example: `w0t4p2:abc-123` = Window 0, Tab 4, Pane 2\n- Currently displayed as raw string, not parsed\n\n**Available Data:**\n- `session.terminal.iterm.session_id`: raw session ID string\n- `session.terminal.iterm.tab_name`: human-readable tab name\n- `session.terminal.iterm.window_name`: window name\n- `session.terminal.iterm.profile`: iTerm profile name\n- `session.terminal.term_program`: terminal program identifier\n\n### Implementation Steps\n\n#### 1. Create iTerm Session ID Parser Utility\n**File:** `src/utils/parseITermSessionId.ts`\n\n```typescript\ninterface ITermSessionParts {\n  window: number;\n  tab: number;\n  pane: number;\n  uuid: string;\n  isValid: boolean;\n}\n\nfunction parseITermSessionId(sessionId: string): ITermSessionParts\n```\n\n**Logic:**\n- Parse regex pattern: `w(\\d+)t(\\d+)p(\\d+):(.+)`\n- Extract window, tab, pane numbers and UUID\n- Return structured object with isValid flag\n- Handle edge cases: \"unknown\", malformed strings, generic terminals\n\n#### 2. Create TerminalBreadcrumb Component\n**File:** `src/components/TerminalBreadcrumb.tsx`\n\n**Display Format Options:**\n- **Full hierarchy:** `Window 0 › agent-tracker (Tab 4) › Pane 2`\n- **With window name:** `MacBook-Pro › agent-tracker (Tab 4) › Pane 2`\n- **With profile:** `iTerm2 | Default Profile`\n- **Generic terminal:** `Terminal | zsh | /dev/ttys001`\n\n**Props:**\n```typescript\ninterface TerminalBreadcrumbProps {\n  session: Session;\n}\n```\n\n**Component Structure:**\n- Parse session ID using utility\n- Build breadcrumb hierarchy\n- Show terminal program and profile as secondary info\n- Use Box/Text from Ink for layout\n- Subtle styling: dimColor for separators, bold for active elements\n\n#### 3. Refactor SessionDetail Component\n**File:** `src/components/SessionDetail.tsx`\n\n**Changes:**\n1. Import TerminalBreadcrumb component\n2. Remove lines 37-63 (entire Terminal Information section)\n3. Add TerminalBreadcrumb after Status (around line 32):\n   ```tsx\n   \u003cBox marginBottom={1}\u003e\n     \u003cText bold\u003eStatus: \u003c/Text\u003e\n     \u003cStatusBadge status={session.status} /\u003e\n   \u003c/Box\u003e\n   \n   \u003cTerminalBreadcrumb session={session} /\u003e\n   \n   \u003cDetailRow label=\"Session ID\" value={session.id} /\u003e\n   ```\n\n**Keep:**\n- Session ID\n- Working Directory\n- Git Information (unchanged)\n- Timestamps (unchanged)\n- Recent Conversation (unchanged)\n\n#### 4. Write Tests\n**File:** `src/utils/parseITermSessionId.test.ts`\n\n**Test Cases:**\n- ✓ Valid iTerm session IDs: `w0t4p2:abc-123`, `w1t0p0:xyz-789`\n- ✓ Invalid formats: `invalid`, `w0t4`, `t4p2:abc`\n- ✓ Edge cases: `\"unknown\"`, empty string, undefined\n- ✓ Boundary values: large numbers `w99t99p99:uuid`\n\n### Visual Design\n\n**Example Breadcrumb Displays:**\n\n1. **iTerm with all info:**\n   ```\n   Terminal: MacBook-Pro › agent-tracker (Tab 4) › Pane 2 | Default Profile\n   ```\n\n2. **iTerm without window name:**\n   ```\n   Terminal: Window 0 › my-project (Tab 2) › Pane 1 | Hotkey Window\n   ```\n\n3. **Generic terminal:**\n   ```\n   Terminal: Terminal.app | zsh | /dev/ttys003\n   ```\n\n**Styling:**\n- Use `›` (U+203A) as separator\n- Dim color for separators and \"Window/Tab/Pane\" labels\n- Regular color for names (window name, tab name)\n- Secondary line or inline for profile info\n- Compact single line preferred, wrap to two if needed\n\n### Dependencies\n- **Existing:** Ink (Box, Text), Session types, TerminalInfo interface\n- **New:** None (pure utility + component)\n\n### Testing Strategy\n1. Unit tests for parser (parseITermSessionId.test.ts)\n2. Manual testing with iTerm2 sessions\n3. Manual testing with generic terminals (Terminal.app)\n4. Visual verification in TUI with multiple sessions\n\n### Migration Notes\n- No breaking changes to data model\n- Purely presentational change\n- Can be rolled back by reverting SessionDetail.tsx changes\n- SessionList.tsx unchanged (already shows compact terminal info)","acceptance_criteria":"## Implementation Plan\n\n### 1. Create iTerm Session ID Parser Utility\n**File:** `src/utils/parseITermSessionId.ts`\n\nParse iTerm session IDs (format: `w{window}t{tab}p{pane}:{uuid}`) to extract terminal hierarchy:\n- Input: `\"w0t4p2:abc-123\"` \n- Output: `{ window: 0, tab: 4, pane: 2, uuid: \"abc-123\" }`\n- Handle edge cases: invalid formats, missing components, generic terminals\n\n### 2. Create TerminalBreadcrumb Component\n**File:** `src/components/TerminalBreadcrumb.tsx`\n\nDisplay terminal location hierarchy in a compact, breadcrumb format:\n- Show hierarchy: `Window {n} \u003e Tab {n} ({tab_name}) \u003e Pane {n}`\n- Use window_name if available instead of \"Window {n}\"\n- Handle iTerm2 vs generic terminals gracefully\n- Compact, single-line display with subtle styling\n- Display terminal program (iTerm2/Terminal) and profile as secondary info\n\n### 3. Refactor SessionDetail Component\n**File:** `src/components/SessionDetail.tsx`\n\nReplace verbose \"Terminal Information\" section:\n- **Remove:** Entire Terminal Information section (lines 37-63)\n  - Program, iTerm Tab, iTerm Window, iTerm Profile, iTerm Session ID, TTY, Shell, TERM\n- **Add:** TerminalBreadcrumb component near the top (after Status, before Working Directory)\n- Keep only essential terminal info: Shell and TTY in breadcrumb tooltip/secondary display\n- Maintain visual hierarchy and spacing\n\n### 4. Write Tests\n**File:** `src/utils/parseITermSessionId.test.ts`\n\nTest coverage for parser:\n- Valid iTerm session IDs: `w0t4p2:uuid`, `w1t0p0:uuid`\n- Invalid formats: malformed strings, missing parts\n- Edge cases: unknown session IDs, generic terminals\n- Boundary values: large window/tab/pane numbers\n\n### 5. Visual Design Guidelines\n- Breadcrumb should be subtle but informative\n- Use `\u003e` or `›` as separator\n- Dim colors for hierarchy, bold for active element (pane/tab name)\n- Fallback gracefully for non-iTerm terminals\n- Example display: `iTerm2: Window 0 › agent-tracker (Tab 4) › Pane 2 | Default Profile`\n\n## Acceptance Criteria\n\n- [ ] Parser utility correctly extracts window/tab/pane from iTerm session IDs\n- [ ] Parser handles invalid/unknown session IDs gracefully\n- [ ] TerminalBreadcrumb component displays hierarchy in compact format\n- [ ] TerminalBreadcrumb shows window name when available\n- [ ] TerminalBreadcrumb shows tab name in the hierarchy\n- [ ] SessionDetail uses TerminalBreadcrumb instead of verbose Terminal Information section\n- [ ] Non-iTerm terminals display gracefully (show program name and basic info)\n- [ ] Visual hierarchy is clear and doesn't clutter the interface\n- [ ] Tests verify parser works correctly for valid and invalid inputs\n- [ ] Documentation comments explain the iTerm session ID format\n\n## Out of Scope (Future Enhancements)\n- SessionList integration (keep current display for now)\n- Other terminal emulator support (Alacritty, Kitty, etc.)\n- Interactive breadcrumb navigation\n- Terminal context switching","notes":"## Implementation Complete\n\n### Files Created/Modified:\n1. ✅ `src/utils/parseITermSessionId.ts` - Parser utility for iTerm session IDs\n2. ✅ `src/utils/parseITermSessionId.test.ts` - Comprehensive test suite (14 tests, all passing)\n3. ✅ `src/components/TerminalBreadcrumb.tsx` - New breadcrumb component\n4. ✅ `src/components/SessionDetail.tsx` - Refactored to use breadcrumb\n\n### Changes Summary:\n- **Removed:** Verbose \"Terminal Information\" section (27 lines)\n- **Added:** Compact breadcrumb showing Window › Tab › Pane hierarchy\n- **Parser:** Handles iTerm session ID format `w{window}t{tab}p{pane}:{uuid}`\n- **Tests:** 14 test cases covering valid/invalid formats and edge cases\n- **Build:** No TypeScript errors\n\n### Example Output:\nFor session with:\n- ID: `w0t4p2:uuid`\n- Window: \"MacBook-Pro\"\n- Tab: \"mise\"\n- Profile: \"Default\"\n\nDisplays:\n```\nTerminal: MacBook-Pro › mise (Tab 4) › Pane 2\n          iTerm2 | Default\n```\n\n### Ready for:\n- User acceptance testing with live TUI\n- Visual verification of breadcrumb display\n- Testing with generic terminals (non-iTerm)","status":"in_progress","priority":0,"issue_type":"feature","assignee":"Claude","created_at":"2025-10-20T15:12:41.166133+11:00","updated_at":"2025-10-20T15:12:41.166133+11:00"}
{"id":"agent-tracker-28","title":"Better iTerm2 integration","description":"## Problem\n\nCurrently, session hooks use AppleScript to query iTerm2 for terminal information, which adds ~400ms delay to every session start. While this is acceptable, it limits what information we can gather and blocks the hook execution.\n\nThe iTerm2 Python API provides much richer data but takes ~10 seconds to establish a connection, making it unsuitable for hooks.\n\n## Proposed Solution\n\nMove iTerm2 API integration from hooks into the TUI as a persistent background service:\n\n### Architecture\n\n```\n┌─────────────┐     fast event      ┌──────────────┐\n│   Hooks     │ ──────────────────\u003e │ sessions.jsonl│\n└─────────────┘    (~50ms)          └──────────────┘\n                                            │\n                                            ▼\n                                    ┌──────────────┐\n                                    │     TUI      │\n                                    │              │\n                                    │  ┌────────┐  │\n                                    │  │ iTerm2 │  │\n                                    │  │Service │  │ \u003c── Persistent connection\n                                    │  └────────┘  │     to iTerm2 API\n                                    │      │       │\n                                    │      ▼       │\n                                    │  Enriches    │\n                                    │  Sessions    │\n                                    └──────────────┘\n```\n\n### Components\n\n1. **Fast Hooks** (Keep minimal)\n   - Write only basic session data (~50ms)\n   - Use environment variables only (no AppleScript)\n   - Just: `session_id`, `cwd`, `transcript_path`, `ITERM_SESSION_ID`\n\n2. **TUI-Managed iTerm2 Service** (New)\n   - Persistent Python process with iTerm2 API connection\n   - Maintains WebSocket connection (10s startup, then instant queries)\n   - Enriches sessions asynchronously after they appear in the TUI\n   - Can monitor real-time changes (tab renames, window moves)\n\n3. **Session Enrichment Flow**\n   - Hook creates minimal session event → JSONL\n   - TUI picks up session from JSONL\n   - iTerm2 Service enriches with detailed info (async)\n   - TUI updates display with enriched data\n\n### Benefits\n\n✅ **Blazing fast hooks** - No blocking on iTerm2 queries (50ms vs 400ms)\n✅ **Rich terminal data** - Full window/tab/pane indices, grid size, IDs\n✅ **Real-time updates** - Monitor tab name changes, window organization\n✅ **Better UX** - Sessions appear instantly, details fill in progressively\n✅ **More reliable** - Persistent connection vs repeated AppleScript calls\n\n### Additional Data Available\n\nWith iTerm2 Python API service:\n- Numeric window/tab/pane indices (not parsed from session ID)\n- Terminal grid size (width x height in cells)\n- iTerm2 internal window and tab IDs\n- Real-time session variable monitoring\n- Tab and window hierarchy changes\n\n## Implementation Steps\n\n1. Create iTerm2 service class (`src/services/ITermService.ts`)\n2. Implement Python daemon (`scripts/services/iterm2-daemon.py`)\n3. Add session enrichment to TUI lifecycle\n4. Simplify hooks to remove AppleScript calls\n5. Update session types to support progressive enrichment\n6. Add graceful fallback when service unavailable","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-20T15:12:41.168652+11:00","updated_at":"2025-10-20T15:12:41.168652+11:00"}
{"id":"agent-tracker-29","title":"SessionDetails not showing \"ready\" status (awaiting input)","description":"## Problem\n\nSessionDetails component doesn't display when a session is in \"ready\" status (awaiting user input). The SessionList shows the awaiting input indicator correctly, but when you select a session, the detail view doesn't reflect this state.\n\n## Current Behavior\n\n- SessionList: ✅ Shows \"⚠ Awaiting input\" indicator\n- SessionDetails: ❌ No indication that session is awaiting input\n\n## Expected Behavior\n\nSessionDetails should show:\n- Visual indicator that the session is awaiting input\n- The notification message (if available)\n- Possibly highlight the status badge differently\n\n## Root Cause\n\nSessionDetails doesn't check or display the `session.awaitingInput` or `session.notificationMessage` properties that are tracked in the ActivityStore.\n\n## Related Code\n\n- `src/components/SessionDetail.tsx` - Needs to display awaiting input state\n- `src/components/SessionList.tsx` - Already shows indicator correctly\n- `src/types/session.ts` - Has `awaitingInput` and `notificationMessage` properties\n- `src/services/ActivityStore.ts` - Manages the awaiting input state","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-20T15:12:41.169269+11:00","updated_at":"2025-10-20T15:12:41.169269+11:00","closed_at":"2025-10-20T15:12:41.169269+11:00"}
{"id":"agent-tracker-3","title":"Claude Hooks Plugin Development","description":"Implement Claude Hooks plugin to capture session start/end events and metadata","acceptance_criteria":"- [ ] Research Claude Hooks API documentation\n- [ ] Design hook plugin structure and file layout\n- [ ] Implement session-start hook to capture session beginning\n- [ ] Implement session-end hook to capture session completion\n- [ ] Extract session metadata (session ID, working directory)\n- [ ] Extract terminal identification info\n- [ ] Test hooks locally with demo Claude instance","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-20T15:12:41.169834+11:00","updated_at":"2025-10-20T15:12:41.169834+11:00","closed_at":"2025-10-20T15:12:41.169834+11:00"}
{"id":"agent-tracker-30","title":"Add better tool support","description":"Look through the transcripts of the recent agents and look at the tools. We need a component for each different type of transcript line.\n\nie. Tool (Bash, MultiEdit, TodoWrite) and this should then display that tool usage in a way that makes sense.\n\nWe should also enable an \"expanded\" type of that tool for use in the selection page.\n\nExample requirement: TodoWrite tool should display todos with their status (done/pending/in_progress) in a readable format, not as raw JSON.","design":"## Component Architecture\n\n### Directory Structure\nCreate `src/components/tools/` with:\n- `ToolDisplay.tsx` - Main dispatcher that routes to specific tool renderers\n- `ToolDisplayProps.ts` - Shared types and interfaces\n- `TodoWriteTool.tsx` - Render TodoWrite with formatted checklist\n- `BashTool.tsx` - Render bash commands cleanly\n- `EditTool.tsx` - Render file edits with file path\n- `ReadTool.tsx` - Render file reads\n- `WebFetchTool.tsx` - Render web fetches with URL\n- `GenericTool.tsx` - Fallback for unknown tools\n- `index.ts` - Public exports\n\n### Display Modes\n\n**Collapsed Mode** (one-line summary):\n- TodoWrite: \"✓ Updated todos (3 tasks: 1 done, 1 in progress, 1 pending)\"\n- Bash: \"$ npm run build\" or description if available\n- Edit: \"✎ SessionList.tsx\"\n- Read: \"📖 ARCHITECTURE.md (lines 100-200)\" if range specified\n- WebFetch: \"🌐 https://example.com\"\n\n**Expanded Mode** (full details):\n- TodoWrite: Formatted checklist with status icons (✓/◐/○)\n- Bash: Command on one line, description on next (if available)\n- Edit: File path, change summary (length of old/new strings)\n- Read: File path, line range if specified\n- WebFetch: URL and prompt summary\n\n### Type System\n\n```typescript\ninterface ToolDisplayProps {\n  toolName: string;\n  toolInput: Record\u003cstring, unknown\u003e;\n  toolId: string;\n  mode: 'collapsed' | 'expanded';\n}\n\n// Specific input types (type guards for validation)\ninterface TodoWriteInput {\n  todos: Array\u003c{\n    content: string;\n    activeForm: string;\n    status: 'pending' | 'in_progress' | 'completed';\n  }\u003e;\n}\n\ninterface BashInput {\n  command: string;\n  description?: string;\n}\n\ninterface EditInput {\n  file_path: string;\n  old_string: string;\n  new_string: string;\n  replace_all?: boolean;\n}\n\ninterface ReadInput {\n  file_path: string;\n  offset?: number;\n  limit?: number;\n}\n\ninterface WebFetchInput {\n  url: string;\n  prompt: string;\n}\n```\n\n### Integration Points\n\n**TranscriptViewer.tsx** (primary integration):\n- Replace raw JSON display (lines 308-315) with ToolDisplay component\n- Pass mode='expanded' when entry is selected/expanded\n- Pass mode='collapsed' for preview\n\n**SessionDetail.tsx** (optional enhancement):\n- Could show recent tool usage with ToolDisplay in collapsed mode\n- Would provide quick overview of what tools were used\n\n### Data Flow\n\n```\nParsedTranscriptEntry (type='tool_use')\n  ↓\nTranscriptViewer detects tool_use entry\n  ↓\nRenders \u003cToolDisplay toolName={entry.toolName} toolInput={entry.toolInput} mode={isExpanded ? 'expanded' : 'collapsed'} /\u003e\n  ↓\nToolDisplay dispatches to specific renderer:\n  - TodoWrite → \u003cTodoWriteTool /\u003e\n  - Bash → \u003cBashTool /\u003e\n  - Edit → \u003cEditTool /\u003e\n  - etc.\n  ↓\nTool-specific component renders formatted output\n```\n\n### Testing Strategy\n\n1. Unit tests for each tool renderer with sample inputs\n2. Type guard tests to ensure input validation works\n3. Snapshot tests for both collapsed and expanded modes\n4. Integration test with TranscriptViewer using real transcript data","acceptance_criteria":"## Must Have\n\n### Core Infrastructure\n- [ ] Create `src/components/tools/` directory structure\n- [ ] Create `ToolDisplay.tsx` component that dispatches to tool-specific renderers\n- [ ] Create shared type definitions in `ToolDisplayProps.ts`\n- [ ] Create `GenericTool.tsx` fallback for unknown tool types\n\n### Tool Renderers (Priority Order)\n- [ ] **TodoWriteTool.tsx** - Render TodoWrite with formatted checklist\n  - Collapsed: Show count summary with status breakdown\n  - Expanded: Show todos as list with status icons (✓/◐/○)\n  - Must handle all three statuses: completed, in_progress, pending\n  \n- [ ] **BashTool.tsx** - Render Bash commands\n  - Collapsed: Show command or description (prefer description)\n  - Expanded: Show command and description (if available)\n  \n- [ ] **EditTool.tsx** - Render file edits\n  - Collapsed: Show file name with edit icon\n  - Expanded: Show full file path, indicate if replace_all\n  \n- [ ] **ReadTool.tsx** - Render file reads\n  - Collapsed: Show file name with read icon\n  - Expanded: Show full file path, show line range if offset/limit specified\n\n- [ ] **WebFetchTool.tsx** - Render web fetches\n  - Collapsed: Show domain or shortened URL\n  - Expanded: Show full URL and prompt summary\n\n### Integration\n- [ ] Update `TranscriptViewer.tsx` to use ToolDisplay instead of raw JSON\n  - Replace JSON.stringify on lines 308-315\n  - Pass correct mode based on isExpanded state\n  \n- [ ] Ensure tool display works in both collapsed and expanded modes\n- [ ] Verify all existing tool types render without errors (graceful fallback to GenericTool)\n\n### Type Safety\n- [ ] Create type definitions for all tool inputs (TodoWriteInput, BashInput, etc.)\n- [ ] Add type guards to validate tool inputs\n- [ ] Ensure proper TypeScript compilation with no new errors\n\n### Testing\n- [ ] Unit tests for each tool renderer component\n- [ ] Test both collapsed and expanded modes for each tool type\n- [ ] Test GenericTool fallback with unknown tool types\n- [ ] Test with real transcript data from ~/.claude/projects/\n\n### Visual Polish\n- [ ] Use consistent icons across tool types\n- [ ] Ensure proper color coding (match existing TranscriptViewer colors)\n- [ ] Proper spacing and alignment in both modes\n- [ ] No visual regressions in TranscriptViewer\n\n## Nice to Have\n\n- [ ] Add more tool renderers: Glob, Grep, Write, Task/Agent\n- [ ] Show tool results inline (not just tool_use, but tool_result too)\n- [ ] Add syntax highlighting for Bash commands\n- [ ] Show diff-style preview for Edit tool\n- [ ] Add MCP tool renderer for plugin tools\n- [ ] Add ToolDisplay to SessionDetail for recent tools summary","notes":"## Implementation Complete\n\nCreated comprehensive tool display system with the following components:\n\n### Files Created\n- `src/components/tools/ToolDisplayProps.ts` - Shared types and type guards\n- `src/components/tools/GenericTool.tsx` - Fallback renderer\n- `src/components/tools/TodoWriteTool.tsx` - TodoWrite with formatted checklist\n- `src/components/tools/BashTool.tsx` - Bash command display\n- `src/components/tools/EditTool.tsx` - File edit display\n- `src/components/tools/ReadTool.tsx` - File read display\n- `src/components/tools/WebFetchTool.tsx` - Web fetch display\n- `src/components/tools/ToolDisplay.tsx` - Main dispatcher\n- `src/components/tools/index.ts` - Public exports\n\n### Integration\n- Updated `TranscriptViewer.tsx` to use ToolDisplay instead of raw JSON\n- Both collapsed and expanded modes implemented\n- Verified TranscriptReader properly provides toolId, toolName, toolInput\n\n### Coverage\nTool renderers cover the top 5 most-used tools (1,559 out of 2,098 total tool calls = 74%):\n- Bash: 1,075 calls ✓\n- Edit: 537 calls ✓\n- TodoWrite: 501 calls ✓\n- Read: 398 calls ✓\n- WebFetch: 48 calls ✓\n\nRemaining tools gracefully fall back to GenericTool renderer.\n\n### Build Status\n✓ TypeScript compilation successful\n✓ No new errors or warnings\n✓ All type guards working correctly","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-20T15:12:41.170306+11:00","updated_at":"2025-10-20T15:12:41.170306+11:00","closed_at":"2025-10-20T15:12:41.170306+11:00"}
{"id":"agent-tracker-31","title":"Change UI state from index-based to id-based","description":"## Problem\n\nWe currently use array indices for UI state tracking. This means if the arrays change order, the UI loses its position.\n\n**Impact**: When sessions array reorders (e.g., by activity time), the selected session changes unexpectedly, confusing the user.\n\n## Locations with Index-Based State\n\n1. **App.tsx** - `selectedIndex` for session list selection (PRIMARY ISSUE)\n2. **TranscriptReducer.ts** - `selectedIndex` for transcript entries (already has UUID fallback, less critical)\n\n## Solution\n\nConvert all UI state from index-based to ID-based:\n- App.tsx: Use `selectedSessionId` instead of `selectedIndex`\n- SessionList.tsx: Compare by session ID instead of index\n- TranscriptReducer.ts: Remove redundant `selectedIndex`, keep only `selectedUuid`\n\nThis ensures selections remain stable even when arrays reorder.","design":"## Implementation Plan\n\n### A. App.tsx Changes\n\n**Replace state:**\n```typescript\n// Before\nconst [selectedIndex, setSelectedIndex] = useState(0);\n\n// After\nconst [selectedSessionId, setSelectedSessionId] = useState\u003cstring | null\u003e(null);\n```\n\n**Update navigation logic:**\n```typescript\n// Up arrow - navigate to previous session\nconst currentIdx = sessions.findIndex(s =\u003e s.id === selectedSessionId);\nif (currentIdx \u003e 0) {\n  setSelectedSessionId(sessions[currentIdx - 1].id);\n}\n\n// Down arrow - navigate to next session  \nconst currentIdx = sessions.findIndex(s =\u003e s.id === selectedSessionId);\nif (currentIdx \u003c sessions.length - 1) {\n  setSelectedSessionId(sessions[currentIdx + 1].id);\n}\n```\n\n**Update derived values:**\n```typescript\n// Before\nconst selectedSession = sessions[selectedIndex] || null;\n\n// After\nconst selectedSession = sessions.find(s =\u003e s.id === selectedSessionId) || null;\n```\n\n**Initialize selection when sessions load:**\n```typescript\nuseEffect(() =\u003e {\n  // If no selection and sessions exist, select first\n  if (!selectedSessionId \u0026\u0026 sessions.length \u003e 0) {\n    setSelectedSessionId(sessions[0].id);\n  }\n  \n  // If selected session no longer exists, select first\n  if (selectedSessionId \u0026\u0026 !sessions.find(s =\u003e s.id === selectedSessionId)) {\n    setSelectedSessionId(sessions[0]?.id || null);\n  }\n}, [sessions, selectedSessionId]);\n```\n\n### B. SessionList.tsx Changes\n\n**Update props:**\n```typescript\ninterface SessionListProps {\n  sessions: Session[];\n  selectedSessionId: string | null;  // Changed from selectedIndex\n}\n```\n\n**Update comparison:**\n```typescript\n\u003cSessionListItem\n  key={session.id}\n  session={session}\n  isSelected={session.id === selectedSessionId}  // Changed from index === selectedIndex\n/\u003e\n```\n\n### C. TranscriptReducer.ts Cleanup\n\n**Remove redundant field:**\n```typescript\nexport interface TranscriptState {\n  entries: ParsedTranscriptEntry[];\n  // selectedIndex: number;  // REMOVE - redundant with selectedUuid\n  seenFilteredCount: number;\n  showSystemEntries: boolean;\n  selectedUuid: string | null;\n}\n```\n\n**Derive index from UUID when needed:**\n```typescript\n// In actions that need index for display\nconst filtered = filterEntries(state.entries, state.showSystemEntries);\nconst currentIndex = filtered.findIndex(e =\u003e e.uuid === state.selectedUuid);\n```\n\n## Testing Checklist\n\n- [ ] Navigate between sessions with arrow keys\n- [ ] Trigger session reordering (wait for activity updates)\n- [ ] Verify selection stays on same session (by ID, not position)\n- [ ] Test with no sessions (should handle null gracefully)\n- [ ] Test with single session\n- [ ] Test transcript viewer navigation\n- [ ] Verify no visual regressions","acceptance_criteria":"## Must Have\n\n- App.tsx uses selectedSessionId instead of selectedIndex\n- SessionList.tsx compares by session ID instead of index\n- Navigation (up/down arrows) works correctly with ID-based selection\n- Selected session remains stable when sessions array reorders\n- Handle edge cases: no sessions, session disappears, first load\n- TranscriptReducer.ts removes redundant selectedIndex field\n- All existing UI navigation behavior preserved\n- TypeScript compiles without errors\n- No visual regressions in session list or transcript viewer\n\n## Nice to Have\n\n- Add unit tests for navigation logic\n- Add integration test that simulates session reordering","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-20T15:12:41.17082+11:00","updated_at":"2025-10-20T15:12:41.17082+11:00","closed_at":"2025-10-20T15:12:41.17082+11:00"}
{"id":"agent-tracker-32","title":"SessionList changes after it's first rendering","description":"## Problem\n\nWhen the SessionList component renders for the first time, it displays many more sessions than it should. On the next re-render, it condenses down to the correct list.\n\nThis suggests we are using different processing logic for first render vs subsequent renders. The second (condensed) version is correct.\n\n## Expected Behavior\n\nThe SessionList should show the correct, condensed list of sessions on the first render, matching what appears on subsequent renders.\n\n## Current Behavior\n\n- **First render**: Shows heaps of different sessions (incorrect)\n- **Second render**: Shows condensed, correct list\n\n## Impact\n\n- Confusing user experience\n- Flash of incorrect content on load\n- Suggests inconsistent data processing\n\n## Root Cause (Hypothesis)\n\nThere may be:\n1. Different data processing paths for initial vs subsequent renders\n2. State initialization issue that gets corrected on re-render\n3. ActivityStore returning different data on first call vs subsequent calls\n4. Session deduplication or filtering only happening after first render","design":"## Root Cause\n\nThe issue is in `App.tsx` lines 43 and 96-102:\n\n### Problem 1: Initial State Includes Stale Sessions\n```typescript\nconst [sessions, setSessions] = useState(store.getSessions());  // Line 43\n```\n\nAt component mount, `sessions` state is initialized with ALL sessions in the store, including old ended sessions that should have been removed.\n\n### Problem 2: Cleanup Happens Too Late\n```typescript\n// Lines 96-102\nuseEffect(() =\u003e {\n  const interval = setInterval(() =\u003e {\n    store.updateSessionStatuses();  // Removes old ended sessions\n  }, 10000); // Every 10 seconds\n  \n  return () =\u003e clearInterval(interval);\n}, [store]);\n```\n\nThe `updateSessionStatuses()` function:\n- Removes ended sessions older than threshold (default 60 seconds)\n- Marks sessions as active/inactive based on activity\n\n**BUT** this only runs every 10 seconds. The first call happens 10 seconds AFTER mount, not immediately.\n\n### The Flow\n\n1. **First render**: `useState(store.getSessions())` returns ALL sessions including old ended ones\n2. **User sees**: Many sessions (incorrect)\n3. **10 seconds later**: `updateSessionStatuses()` runs, removes old sessions, triggers re-render\n4. **User sees**: Condensed list (correct)\n\n## Solution\n\nCall `store.updateSessionStatuses()` immediately on mount, before setting up the interval:\n\n```typescript\nuseEffect(() =\u003e {\n  // Run immediately on mount to clean up stale sessions\n  store.updateSessionStatuses();\n  \n  // Then run every 10 seconds\n  const interval = setInterval(() =\u003e {\n    store.updateSessionStatuses();\n  }, 10000);\n  \n  return () =\u003e clearInterval(interval);\n}, [store]);\n```\n\nThis ensures old sessions are removed before the first render completes.","acceptance_criteria":"## Must Have\n\n- Call store.updateSessionStatuses() immediately on mount in App.tsx\n- First render shows correct (condensed) session list\n- No flash of incorrect content on app startup\n- Session cleanup still runs every 10 seconds as before\n- TypeScript compiles without errors\n\n## Verification\n\n- Start app with old ended sessions in store\n- Verify session list shows correct sessions immediately (no flash)\n- Wait 10+ seconds, verify cleanup still runs periodically\n- Test with no sessions, verify no errors","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-20T15:12:41.171328+11:00","updated_at":"2025-10-20T15:12:41.171328+11:00","closed_at":"2025-10-20T15:12:41.171328+11:00"}
{"id":"agent-tracker-33","title":"Make the SessionList title use a stable colour for projects and branches","description":"Utilise the colour logic (port to JS \u0026 make this it's own separate library) from `/Users/michaelgall/.claude/statusline-ascii.sh` and then utilise this colour for the project and branch names in the sessionlist","notes":"Updated implementation to use background colors with contrasting foreground text, matching the statusline style:\n- Repository names now have colored backgrounds (e.g., agent-tracker with dark green bg)\n- Branch names now have colored backgrounds (e.g., main with magenta bg)\n- Text color automatically adjusts for contrast (light text on dark bg, dark text on light bg)\n- When selected, items revert to cyan text without background for visibility\n- Added padding around text (space before and after) for better visual appearance","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-20T15:12:41.17182+11:00","updated_at":"2025-10-20T15:12:41.17182+11:00","closed_at":"2025-10-20T15:12:41.17182+11:00"}
{"id":"agent-tracker-34","title":"Create a docusaurus site","description":"Want to create a docusaurus site at  which can showcase agent-tracker\nIt should outline the basics of what agent-tracker does, \n\n- Talk about future agent support (planned)\n- Have a separate page for claude code\n- HAve installation instructions on the front page including the marketplace and hooks installation\n- Terminal support (discuss apple terminal support to begin with iTerm2, Terminal...)\n- \n","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T15:12:41.172284+11:00","updated_at":"2025-10-20T15:12:41.172284+11:00","closed_at":"2025-10-20T15:12:41.172284+11:00"}
{"id":"agent-tracker-35","title":"Empty state","description":"Check if the events file is there\n\nif it isn't we need to boot up into an empty state. This should tell the user\nthat they need to install the claude code plugin and link off to documentation\nabout how to do that","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T15:12:41.172725+11:00","updated_at":"2025-10-20T15:12:41.172725+11:00","closed_at":"2025-10-20T15:12:41.172725+11:00"}
{"id":"agent-tracker-36","title":"Remove dependency on jq","description":"We currently have a dependency on jq\nbut that will mean it needs to be installed. Javascript/typescript has everything we need, so we should refactor\nthe hooks to remove that and to shell out to a hook implementations. Let's take a TDD approach first and \nensure that all of our hook implementations have test coverage, then refactor them ensuring that we pass the tests","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T15:12:41.173184+11:00","updated_at":"2025-10-20T15:12:41.173184+11:00","closed_at":"2025-10-20T15:12:41.173184+11:00"}
{"id":"agent-tracker-37","title":"Remove dependency on jq","description":"We currently have a dependency on jq\nbut that will mean it needs to be installed. Javascript/typescript has everything we need, so we should refactor\nthe hooks to remove that and to shell out to a hook implementations. Let's take a TDD approach first and \nensure that all of our hook implementations have test coverage, then refactor them ensuring that we pass the tests","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T15:12:41.173656+11:00","updated_at":"2025-10-20T15:12:41.173656+11:00","closed_at":"2025-10-20T15:12:41.173656+11:00"}
{"id":"agent-tracker-38","title":"Improve empty transcript state","description":"When the transcript isn't there, this often means\nthat claude code has forked the transcript, but hasn't filled anything in. Usually straight after a SessionStart event,\nlet's implement an empty state that explains to the user that this session is waiting for input and that their transcript will be available\nonce they interact with the newly opened thread. We should be able to tell from the sessionstorage that it's a new session (ie. has only just received one event)","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T15:12:47.64611+11:00","updated_at":"2025-10-20T15:15:19.661187+11:00","closed_at":"2025-10-20T15:15:19.661187+11:00"}
{"id":"agent-tracker-39","title":"Improve bash input/output tracking","description":"The bash input/output currently displays as 2 separate messages but should ideally be combined into 1 message. The current display isn't ideal and needs better understanding of the transcript structure.\n\nCurrent issues:\na) Bash input and output appear as 2 messages instead of 1\nb) The display format isn't correct\n\nPotential solution may require:\n- Look-ahead in the transcript (checking the next message)\n- Better message correlation logic\n- Need to consult with user on implementation options\n\nSee screenshot for current behavior.","notes":"Implemented two-pass parsing with look-ahead for bash input/output merging:\n\n1. Pass 1: Read all raw JSONL entries\n2. Pass 2: Parse with access to upcoming entries (look-ahead up to 3 entries)\n3. Added bash detection helpers to identify and extract bash tags\n4. Implemented merging logic to combine bash-input and bash-output into single entry\n\nResult: Bash commands and their output now display as one entry instead of two.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T15:23:12.366293+11:00","updated_at":"2025-10-20T22:56:34.885387+11:00","closed_at":"2025-10-20T22:56:34.885387+11:00"}
{"id":"agent-tracker-4","title":"Data Communication Layer","description":"Build the communication system between hooks and the central TUI processor","acceptance_criteria":"- [ ] Decide on architecture: named pipe vs JSONL file\n- [ ] Define event data schema (SessionStart, SessionEnd, metadata)\n- [ ] Implement data sender in hook plugin\n- [ ] Implement data receiver in central processor\n- [ ] Handle concurrent writes from multiple Claude instances\n- [ ] Add error handling and reconnection logic\n- [ ] Test with multiple simultaneous sessions","notes":"Communication architecture decided: Using JSONL file (~/.agent-tracker/sessions.jsonl) instead of named pipes for better robustness and simplicity. Hook scripts write events to this file, and the TUI will tail/watch it for updates.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-20T15:12:41.17412+11:00","updated_at":"2025-10-20T15:12:41.17412+11:00","closed_at":"2025-10-20T15:12:41.17412+11:00"}
{"id":"agent-tracker-40","title":"Fix transcript selection stability - use UUIDs not indexes","description":"Two issues with transcript viewer selection:\n\n1. **Escape behavior**: When pressing escape with a transcript entry selected, it jumps to the last transcript instead of returning to the session list\n2. **Selection instability**: When new transcript items arrive, the selection jumps around\n\nRoot cause: Selection mechanism must use UUIDs consistently, not indexes.\n\nRequirements:\n- Selection must be ID-based (UUID) throughout the codebase\n- Escape key should return to session list view\n- Selection should remain stable when new entries are appended","notes":"Fixed React key issues causing selection instability:\n\n1. **TodoWriteTool.tsx:40** - Changed from `key={index}` to `key={todo.content}` to use stable IDs\n2. **SessionList.tsx:107-146** - Removed unnecessary static keys from non-iterated elements (key=\"status\", key=\"repo\", etc.)\n\nRoot cause: Duplicate/index-based keys caused React to misidentify components when lists changed, causing selection to jump around. Now all keys are ID-based (UUIDs for transcript entries, content for todos, session IDs for sessions).\n\nSelection mechanism was already UUID-based in the reducer - the issue was purely with React reconciliation.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-20T22:53:11.582344+11:00","updated_at":"2025-10-20T22:56:35.08711+11:00","closed_at":"2025-10-20T22:56:35.08711+11:00"}
{"id":"agent-tracker-41","title":"Fix session selection jumping when activity events arrive","description":"When viewing a TranscriptViewer, receiving activity events (stop/notification) causes the selected session to jump to a different session.\n\n**Root Cause**: \n- Sessions array is sorted by priority (awaiting input \u003e active \u003e inactive \u003e ended)\n- When activity events arrive, sessions get re-sorted\n- App.tsx effect at lines 119-130 runs whenever sessions array changes\n- Even though it checks if selected session exists, there may be edge cases or race conditions\n\n**Events that trigger**:\n```json\n{\"event_type\":\"activity\",\"activity_type\":\"stop\",\"session_id\":\"...\",\"hook_event_name\":\"Stop\"}\n{\"event_type\":\"activity\",\"activity_type\":\"notification\",\"notification_message\":\"Claude is waiting for your input\",\"hook_event_name\":\"Notification\"}\n```\n\n**Solution**: Make the selection management more defensive and ensure it never changes when in transcript view mode.","notes":"Fixed session jumping issue with stack-based navigation refactoring.\n\n**Root cause:** The selection effect was running every time the sessions array changed (including re-sorting), even though the session IDs didn't actually change.\n\n**Solution (App.tsx:114-135):**\n1. Added `useMemo` to track session IDs: `sessionIds = sessions.map(s =\u003e s.id).join(',')`\n2. Changed effect dependency from `sessions` to `sessionIds`\n3. Now effect only runs when sessions are added/removed, not when re-sorted\n\n**Result:** When activity events arrive and sessions get re-sorted by priority, the selected session stays stable because sessionIds doesn't change.\n\nThis was discovered during stack refactoring - need to verify fix works correctly.","status":"open","priority":0,"issue_type":"bug","created_at":"2025-10-20T23:00:04.531865+11:00","updated_at":"2025-10-20T23:12:35.765071+11:00"}
{"id":"agent-tracker-42","title":"Complete navigation stack refactoring","description":"The navigation stack refactoring is functionally complete but needs final touches:\n\n**Completed:**\n- ✅ Created `useNavigation` hook with reducer pattern\n- ✅ Created `SessionListView` component with keyboard handling\n- ✅ Refactored `App.tsx` to use navigation stack (5 useState → 1 hook)\n- ✅ Updated `ToolDetailView` to make onBack optional\n- ✅ Build succeeds, app runs correctly\n\n**Remaining:**\n- [ ] Add unit tests for `useNavigation` reducer\n- [ ] Remove any unused imports/code from refactoring\n- [ ] Verify no duplicate React keys remain (saw warning in dev output)\n- [ ] Update documentation/comments as needed\n- [ ] Test all navigation flows manually (list → transcript → tool detail → back)\n\nThe core refactoring is done and working - this issue tracks the polish/cleanup work.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T23:10:20.28883+11:00","updated_at":"2025-10-20T23:10:20.60385+11:00"}
{"id":"agent-tracker-43","title":"implement simple MCP server as part of plugin to allow sessions to communicate work summary","description":"We should implement a very simple cli based MCP server using the npm package: @modelcontextprotocol/sdk\n\nThis should be installed as part of the plugin, and should simply be a command that can be called set_title (or something idiomatic like that).\n\nOnce installed the plugin should instruct the agent to call set_title when a piece of work is started or general change of direction has happened. This should be a 5 word summary. \n\nThe MCP itself should just simply echo back the title, but we can then pick up the call to the MCP through the transcript or through a Tools usage and utilise it to update our session model.","design":"## Implementation Plan\n\n1. **MCP Server Setup**\n   - Install @modelcontextprotocol/sdk as dependency\n   - Create CLI-based MCP server script in `.claude-plugin/mcp/`\n   - Implement `set_title` tool that accepts a 5-word summary\n\n2. **Plugin Integration**\n   - Update plugin.json to register the MCP server\n   - Configure server to be available to Claude sessions\n   - Add instructions for agents to call set_title at key moments\n\n3. **Event Capture**\n   - Monitor transcript for MCP tool calls\n   - Extract set_title invocations and summaries\n   - Update session model with work summaries\n\n4. **Testing**\n   - Verify MCP server is discoverable by Claude\n   - Test set_title tool from within a session\n   - Confirm summaries are captured in session data","acceptance_criteria":"- [ ] MCP server installed and runnable\n- [ ] set_title tool available in Claude sessions\n- [ ] Tool accepts 5-word summary parameter\n- [ ] Plugin instructions guide agents to use set_title\n- [ ] Session model updated with work summaries\n- [ ] Integration tested end-to-end","notes":"Implementation completed! All components are in place:\n\n**Phase 1 - MCP Server** ✅\n- Installed @modelcontextprotocol/sdk\n- Created mcp/src/index.ts with stdio-based server\n- Implemented set_work_summary tool\n- Added build infrastructure\n\n**Phase 2 - Plugin Integration** ✅\n- Updated plugin.json with mcpServers configuration\n- Created .claude-plugin/instructions.md with usage guide\n- Server uses ${CLAUDE_PLUGIN_ROOT} for portability\n\n**Phase 3 - Event Capture \u0026 State** ✅\n- Added workSummary field to Session type\n- Created UPDATE_WORK_SUMMARY action type\n- Enhanced activity-handler.ts to capture tool_input\n- Updated SessionTrackerService to detect MCP calls\n- Modified ActivityStore reducer to update work summaries\n\n**Phase 4 - UI Integration** ✅\n- Updated SessionList to display work summaries (dimmed, italic)\n- Updated SessionDetail to show current work (magenta, italic)\n- Both components conditionally render when workSummary exists\n\n**Build \u0026 Testing** ✅\n- All TypeScript compiles successfully\n- MCP server responds correctly to protocol requests\n- Tool schema validated\n\n**Ready for E2E Testing:**\nNext step is to test in an actual Claude session to verify:\n1. MCP server is discoverable\n2. Tool appears in tool list\n3. PostToolUse hook captures parameters\n4. TUI updates with work summary","status":"in_progress","priority":2,"issue_type":"feature","created_at":"2025-10-21T01:41:03.518997+11:00","updated_at":"2025-10-21T01:57:06.833297+11:00"}
{"id":"agent-tracker-44","title":"Improve the SessionDetails page. Lots of noise and unnecessary stuff.\n\n","description":"W eneed to rework the SessionDetails page and have a bit more focus at the top on the repository and the branch. Second: the summary.\n\nwe don't need to show the transcript, have little focus on the session transcript and then finally the least amount of focus on the terminal","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T23:44:08.81075+11:00","updated_at":"2025-10-22T23:44:08.81075+11:00"}
{"id":"agent-tracker-5","title":"Session Tracking \u0026 State Management","description":"Build the core logic for tracking session states and activity","acceptance_criteria":"- [ ] Create session data model/interface\n- [ ] Implement session registry/store\n- [ ] Track session lifecycle (start, active, inactive, ended)\n- [ ] Calculate last activity timestamp\n- [ ] Implement sorting by activity (most recent first)\n- [ ] Mark inactive sessions for visual distinction\n- [ ] Handle session cleanup on end events\n- [ ] Persist session data (optional, for recovery)","notes":"Session persistence is intentionally skipped for MVP - sessions are ephemeral and only exist while the TUI is running. Future enhancement could add persistence if needed.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-20T15:12:41.174583+11:00","updated_at":"2025-10-20T15:12:41.174583+11:00","closed_at":"2025-10-20T15:12:41.174583+11:00"}
{"id":"agent-tracker-6","title":"TUI Interface Development","description":"Build the visual Ink-based TUI with 2-column layout","acceptance_criteria":"- [ ] Create basic Ink app structure with React components\n- [ ] Implement 2-column layout (left: session list, right: details)\n- [ ] Build session list component with sorting\n- [ ] Style active sessions (highlighted/colored)\n- [ ] Style inactive sessions (grey/dimmed)\n- [ ] Implement session selection/navigation\n- [ ] Build detail panel showing session info\n- [ ] Add real-time updates when sessions change\n- [ ] Handle terminal resize gracefully","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-20T15:12:41.175056+11:00","updated_at":"2025-10-20T15:12:41.175056+11:00","closed_at":"2025-10-20T15:12:41.175056+11:00"}
{"id":"agent-tracker-7","title":"Testing Infrastructure \u0026 Demo Setup","description":"Set up demo-repo and testing framework for feedback loop development","acceptance_criteria":"- [ ] Create demo-repo/ directory\n- [ ] Set up test Claude sessions in demo-repo\n- [ ] Create test scenarios (start, stop, multiple sessions)\n- [ ] Document testing workflow\n- [ ] Add scripts for easy testing\n- [ ] Test session detection and tracking\n- [ ] Verify TUI updates correctly","notes":"Testing infrastructure setup complete. Created demo-repo with sample files, test scenarios, workflow documentation, and helper scripts. \n\nThe last two acceptance criteria (test session detection and verify TUI updates) will be completed during integration testing once the hooks, communication layer, and TUI are implemented.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-20T15:12:41.175524+11:00","updated_at":"2025-10-20T15:12:41.175524+11:00","closed_at":"2025-10-20T15:12:41.175524+11:00"}
{"id":"agent-tracker-8","title":"Make the hooks a proper plugin feature","description":"Package the Claude hooks plugin as a proper installable plugin with installation scripts and documentation","design":"Look at the documentation here: https://docs.claude.com/en/docs/claude-code/plugins-reference and examples https://github.com/steveyegge/beads for how it should work. Specifically need it to be able be installed into my ~/.claude/ directory and also in the development directory.\n\nIt's important to note that currently we don't seem to be adding anything to sessions.jsonl","acceptance_criteria":"- [x] Create installation script that copies plugin to ~/.claude/plugins/agent-tracker\n- [x] Create uninstall script to remove plugin\n- [x] Add npm scripts for plugin:install and plugin:uninstall\n- [x] Update README with clear installation instructions\n- [x] Ensure hooks have correct permissions (executable)\n- [x] Fix JSONL formatting (single-line compact JSON)\n- [x] Register plugin in ~/.claude/settings.json enabledPlugins\n- [x] Uninstall script removes plugin from settings.json\n- [ ] Verify hooks fire when Claude session starts (requires new session)\n- [ ] Test sessions appear in TUI","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-20T15:12:41.175967+11:00","updated_at":"2025-10-20T15:12:41.175967+11:00","closed_at":"2025-10-20T15:12:41.175967+11:00"}
{"id":"agent-tracker-9","title":"Move non-marketplace code out of `.claude-plugin/`","description":"`.claude-plugin` is used just for giving information to claude, but the code it executes should live in the regular repository directory. Please move it out.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-20T15:12:41.176402+11:00","updated_at":"2025-10-20T15:12:41.176402+11:00","closed_at":"2025-10-20T15:12:41.176402+11:00"}
