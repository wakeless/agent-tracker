{"id":"agent-tracker-1","title":"Initial Agent Tracker build","description":"Build the initial version of the Agent Tracker CLI TUI using Ink (TypeScript)","design":"We are building a tool which tracks the active claude windows. Claude has a hooks API (https://docs.claude.com/en/docs/claude-code/hooks) which can be installed as a plugin (https://docs.claude.com/en/docs/claude-code/plugins-reference)\n\nThe problem this solves is \"lost\" claude windows, ie they get left in a tab, or they get left in a sleep state (ctrl+z) and you don't know where you, or they were.\n\nSo we want to create a 2 column tui window which tracks them and provides information to the user as to their status.\n\nDown the left side is all \"active\" claude sessions (ones that haven't interacted should be at the bottom and \"grey\") active ones should be at the top.\n\nWe need to use Claude Hooks to (specifically session start and session end) to communicate over a named pipe to a central processor (the tool). Alternatively we could send jsonl events to a file and then track it like that.\n\nThe tool then ingests this data and utilises it to display each of your open claude sessions.\n\nOther information that we need to extract from the hooks is \"session\" ie, what is the session, and ideally identifying information from the terminal so that we can tell the user where these claude sessions \"are\" and what they were working on.\n\nWe want to build this tool with typescript and ink. \n\nTo provide a feedback loop for yourself to work on, you can run claude in a directory within this file called `demo-repo` this will allow you to stop and start claude, and see it's sessions start and stop.","status":"closed","priority":0,"issue_type":"epic","created_at":"2025-10-16T13:19:42.636481+11:00","updated_at":"2025-10-16T13:40:24.811445+11:00","closed_at":"2025-10-16T13:40:24.811445+11:00","dependencies":[{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-2","type":"parent-child","created_at":"2025-10-16T13:22:52.838745+11:00","created_by":"michaelgall"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-3","type":"parent-child","created_at":"2025-10-16T13:22:52.884216+11:00","created_by":"michaelgall"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-4","type":"parent-child","created_at":"2025-10-16T13:22:52.931485+11:00","created_by":"michaelgall"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-5","type":"parent-child","created_at":"2025-10-16T13:22:52.976515+11:00","created_by":"michaelgall"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-6","type":"parent-child","created_at":"2025-10-16T13:22:53.017313+11:00","created_by":"michaelgall"},{"issue_id":"agent-tracker-1","depends_on_id":"agent-tracker-7","type":"parent-child","created_at":"2025-10-16T13:22:53.064663+11:00","created_by":"michaelgall"}]}
{"id":"agent-tracker-10","title":"investigate and implement more information about where the agent is running","description":"We want the user to be able to quickly identify where and when the agent is running. At the moment it says, \"iTerm.app\" but please research iterm2 and if there's tab information or other ways to connect it that would be great. \n\nIt's also possible that this will be running in docker so think about if it's running in docker how we could extract information from that.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-16T16:45:27.126129+11:00","updated_at":"2025-10-16T16:58:36.714377+11:00","closed_at":"2025-10-16T16:58:36.714377+11:00"}
{"id":"agent-tracker-11","title":"Make agent-tracker easily installable","description":"We want this to be able to be installed with `npm install -g agent-tracker` (or whatever the package name is) and then it will be able to be run with `agent-tracker`","status":"in_progress","priority":0,"issue_type":"task","created_at":"2025-10-16T16:47:00.566587+11:00","updated_at":"2025-10-16T16:58:36.805904+11:00"}
{"id":"agent-tracker-2","title":"Project Setup \u0026 Infrastructure","description":"Set up the TypeScript project with Ink and establish the basic project structure","acceptance_criteria":"- [ ] Initialize npm project with package.json\n- [ ] Install and configure TypeScript (tsconfig.json)\n- [ ] Install Ink and React dependencies\n- [ ] Set up build scripts and tooling\n- [ ] Create src/ directory structure\n- [ ] Add .gitignore for node_modules, dist, etc.\n- [ ] Create basic entry point (index.ts or cli.ts)","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-16T13:22:37.284552+11:00","updated_at":"2025-10-16T13:26:39.574318+11:00","closed_at":"2025-10-16T13:26:39.574318+11:00"}
{"id":"agent-tracker-3","title":"Claude Hooks Plugin Development","description":"Implement Claude Hooks plugin to capture session start/end events and metadata","acceptance_criteria":"- [ ] Research Claude Hooks API documentation\n- [ ] Design hook plugin structure and file layout\n- [ ] Implement session-start hook to capture session beginning\n- [ ] Implement session-end hook to capture session completion\n- [ ] Extract session metadata (session ID, working directory)\n- [ ] Extract terminal identification info\n- [ ] Test hooks locally with demo Claude instance","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-16T13:22:37.36233+11:00","updated_at":"2025-10-16T13:32:22.440264+11:00","closed_at":"2025-10-16T13:32:22.440264+11:00"}
{"id":"agent-tracker-4","title":"Data Communication Layer","description":"Build the communication system between hooks and the central TUI processor","acceptance_criteria":"- [ ] Decide on architecture: named pipe vs JSONL file\n- [ ] Define event data schema (SessionStart, SessionEnd, metadata)\n- [ ] Implement data sender in hook plugin\n- [ ] Implement data receiver in central processor\n- [ ] Handle concurrent writes from multiple Claude instances\n- [ ] Add error handling and reconnection logic\n- [ ] Test with multiple simultaneous sessions","notes":"Communication architecture decided: Using JSONL file (~/.agent-tracker/sessions.jsonl) instead of named pipes for better robustness and simplicity. Hook scripts write events to this file, and the TUI will tail/watch it for updates.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-16T13:22:37.45455+11:00","updated_at":"2025-10-16T13:35:23.881322+11:00","closed_at":"2025-10-16T13:35:23.881322+11:00"}
{"id":"agent-tracker-5","title":"Session Tracking \u0026 State Management","description":"Build the core logic for tracking session states and activity","acceptance_criteria":"- [ ] Create session data model/interface\n- [ ] Implement session registry/store\n- [ ] Track session lifecycle (start, active, inactive, ended)\n- [ ] Calculate last activity timestamp\n- [ ] Implement sorting by activity (most recent first)\n- [ ] Mark inactive sessions for visual distinction\n- [ ] Handle session cleanup on end events\n- [ ] Persist session data (optional, for recovery)","notes":"Session persistence is intentionally skipped for MVP - sessions are ephemeral and only exist while the TUI is running. Future enhancement could add persistence if needed.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-16T13:22:37.522219+11:00","updated_at":"2025-10-16T13:37:15.98112+11:00","closed_at":"2025-10-16T13:37:15.98112+11:00"}
{"id":"agent-tracker-6","title":"TUI Interface Development","description":"Build the visual Ink-based TUI with 2-column layout","acceptance_criteria":"- [ ] Create basic Ink app structure with React components\n- [ ] Implement 2-column layout (left: session list, right: details)\n- [ ] Build session list component with sorting\n- [ ] Style active sessions (highlighted/colored)\n- [ ] Style inactive sessions (grey/dimmed)\n- [ ] Implement session selection/navigation\n- [ ] Build detail panel showing session info\n- [ ] Add real-time updates when sessions change\n- [ ] Handle terminal resize gracefully","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-16T13:22:37.590476+11:00","updated_at":"2025-10-16T13:39:33.465867+11:00","closed_at":"2025-10-16T13:39:33.465867+11:00"}
{"id":"agent-tracker-7","title":"Testing Infrastructure \u0026 Demo Setup","description":"Set up demo-repo and testing framework for feedback loop development","acceptance_criteria":"- [ ] Create demo-repo/ directory\n- [ ] Set up test Claude sessions in demo-repo\n- [ ] Create test scenarios (start, stop, multiple sessions)\n- [ ] Document testing workflow\n- [ ] Add scripts for easy testing\n- [ ] Test session detection and tracking\n- [ ] Verify TUI updates correctly","notes":"Testing infrastructure setup complete. Created demo-repo with sample files, test scenarios, workflow documentation, and helper scripts. \n\nThe last two acceptance criteria (test session detection and verify TUI updates) will be completed during integration testing once the hooks, communication layer, and TUI are implemented.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-16T13:22:37.747919+11:00","updated_at":"2025-10-16T13:29:04.458704+11:00","closed_at":"2025-10-16T13:29:04.458704+11:00"}
{"id":"agent-tracker-8","title":"Make the hooks a proper plugin feature","description":"Package the Claude hooks plugin as a proper installable plugin with installation scripts and documentation","design":"Look at the documentation here: https://docs.claude.com/en/docs/claude-code/plugins-reference and examples https://github.com/steveyegge/beads for how it should work. Specifically need it to be able be installed into my ~/.claude/ directory and also in the development directory.\n\nIt's important to note that currently we don't seem to be adding anything to sessions.jsonl","acceptance_criteria":"- [x] Create installation script that copies plugin to ~/.claude/plugins/agent-tracker\n- [x] Create uninstall script to remove plugin\n- [x] Add npm scripts for plugin:install and plugin:uninstall\n- [x] Update README with clear installation instructions\n- [x] Ensure hooks have correct permissions (executable)\n- [x] Fix JSONL formatting (single-line compact JSON)\n- [x] Register plugin in ~/.claude/settings.json enabledPlugins\n- [x] Uninstall script removes plugin from settings.json\n- [ ] Verify hooks fire when Claude session starts (requires new session)\n- [ ] Test sessions appear in TUI","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-16T15:30:58.657675+11:00","updated_at":"2025-10-16T15:48:42.896599+11:00","closed_at":"2025-10-16T15:48:42.896599+11:00"}
{"id":"agent-tracker-9","title":"Move non-marketplace code out of `.claude-plugin/`","description":"`.claude-plugin` is used just for giving information to claude, but the code it executes should live in the regular repository directory. Please move it out.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-16T16:43:21.86794+11:00","updated_at":"2025-10-16T16:53:19.761526+11:00","closed_at":"2025-10-16T16:53:19.761526+11:00"}
