// Event types for Agent Tracker
// These match the schema generated by the Claude hooks

/**
 * Terminal-specific information from terminal providers.
 * Currently supports iTerm2, with a generic fallback for other terminals.
 *
 * Terminal providers are modular scripts in scripts/hooks/providers/
 * that extract terminal-specific metadata. See providers/README.md for details.
 */
export interface ITermInfo {
  session_id: string;
  profile: string;
  tab_name: string;
  window_name: string;
}

export interface DockerInfo {
  is_container: boolean;
  container_id: string;
  container_name: string;
}

/**
 * Terminal information captured by hook scripts.
 * The `iterm` field contains terminal-specific data from the active provider.
 *
 * Future terminal providers can be added by:
 * 1. Creating a new provider script (e.g., scripts/hooks/providers/alacritty.sh)
 * 2. Adding detection logic to session-start.sh and session-end.sh
 * 3. Optionally extending this interface with new provider-specific fields
 */
export interface TerminalInfo {
  tty: string;
  term: string;
  shell: string;
  ppid: string;
  term_program: string;
  term_session_id: string;
  lc_terminal: string;
  lc_terminal_version: string;
  /** Terminal-specific metadata from the active provider (iTerm2, generic, etc.) */
  iterm: ITermInfo;
}

export interface BaseEvent {
  event_type: 'session_start' | 'session_end';
  session_id: string;
  cwd: string;
  transcript_path: string;
  terminal: TerminalInfo;
  docker: DockerInfo;
  timestamp: string;
}

export interface SessionStartEvent extends BaseEvent {
  event_type: 'session_start';
}

export interface SessionEndEvent extends BaseEvent {
  event_type: 'session_end';
}

/**
 * Activity event from Claude Code activity hooks
 * Tracks tool usage, prompts, and other session activity
 */
export interface ActivityEvent {
  event_type: 'activity';
  activity_type: 'tool_use' | 'prompt_submit' | 'stop' | 'subagent_stop' | 'notification';
  session_id: string;
  timestamp: string;
  tool_name?: string; // Present for tool_use events
  hook_event_name?: string; // Original hook name for debugging
}

export type SessionEvent = SessionStartEvent | SessionEndEvent | ActivityEvent;

export interface EventHandler {
  onSessionStart: (event: SessionStartEvent) => void;
  onSessionEnd: (event: SessionEndEvent) => void;
  onActivity?: (event: ActivityEvent) => void;
  onError?: (error: Error) => void;
}
